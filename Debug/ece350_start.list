
ece350_start.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003764  08003764  00013764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003834  08003834  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800383c  0800383c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000070  080038b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  20000244  080038b4  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087f7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196d  00000000  00000000  00028897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0002a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  0002a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165ec  00000000  00000000  0002b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099b7  00000000  00000000  0004165c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008640f  00000000  00000000  0004b013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1422  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000248c  00000000  00000000  000d1474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800374c 	.word	0x0800374c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800374c 	.word	0x0800374c

080001e0 <PendSV_Handler>:
.global PendSV_Handler
.global firstThread

.thumb_func
PendSV_Handler:
	MRS R0, PSP // Get the current PSP value
 80001e0:	f3ef 8009 	mrs	r0, PSP
    STMDB R0!, {R4-R11} // Store R4-R11 on the stack
 80001e4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR PSP, R0
 80001e8:	f380 8809 	msr	PSP, r0
    BL scheduler // Call the scheduler to switch threads
 80001ec:	f000 fbda 	bl	80009a4 <scheduler>
    MRS R0, PSP // Get the updated PSP value
 80001f0:	f3ef 8009 	mrs	r0, PSP
    MOV LR, #0xFFFFFFFD // Set EXC_RETURN to return to Thread mode, using PSP
 80001f4:	f06f 0e02 	mvn.w	lr, #2
    LDMIA R0!, {R4-R11} // Load R4-R11 from the stack
 80001f8:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR PSP, R0 // Update PSP
 80001fc:	f380 8809 	msr	PSP, r0
    BX LR // Branch to the address in LR (returns to Thread mode)
 8000200:	4770      	bx	lr

08000202 <SVC_Handler>:

.thumb_func

SVC_Handler:

	tst lr, #4
 8000202:	f01e 0f04 	tst.w	lr, #4

	ite eq
 8000206:	bf0c      	ite	eq

	mrseq r0, MSP
 8000208:	f3ef 8008 	mrseq	r0, MSP

	mrsne r0, PSP
 800020c:	f3ef 8009 	mrsne	r0, PSP
	B SVC_Handler_Main
 8000210:	f000 bc8c 	b.w	8000b2c <SVC_Handler_Main>

08000214 <firstThread>:

.thumb_func

firstThread:
    BL scheduler
 8000214:	f000 fbc6 	bl	80009a4 <scheduler>
	MRS R0, PSP
 8000218:	f3ef 8009 	mrs	r0, PSP
    LDMIA R0!, {R4-R11} // Restore R4-R11 from the stack
 800021c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR PSP, R0 // Update PSP
 8000220:	f380 8809 	msr	PSP, r0
	MOV LR, #0xFFFFFFFD
 8000224:	f06f 0e02 	mvn.w	lr, #2
    BX LR // Branch to the address in LR (returns to Thread mode)
 8000228:	4770      	bx	lr
 800022a:	0000      	movs	r0, r0
 800022c:	0000      	movs	r0, r0
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002e4:	f000 b974 	b.w	80005d0 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468e      	mov	lr, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14d      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030e:	428a      	cmp	r2, r1
 8000310:	4694      	mov	ip, r2
 8000312:	d969      	bls.n	80003e8 <__udivmoddi4+0xe8>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b152      	cbz	r2, 8000330 <__udivmoddi4+0x30>
 800031a:	fa01 f302 	lsl.w	r3, r1, r2
 800031e:	f1c2 0120 	rsb	r1, r2, #32
 8000322:	fa20 f101 	lsr.w	r1, r0, r1
 8000326:	fa0c fc02 	lsl.w	ip, ip, r2
 800032a:	ea41 0e03 	orr.w	lr, r1, r3
 800032e:	4094      	lsls	r4, r2
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	0c21      	lsrs	r1, r4, #16
 8000336:	fbbe f6f8 	udiv	r6, lr, r8
 800033a:	fa1f f78c 	uxth.w	r7, ip
 800033e:	fb08 e316 	mls	r3, r8, r6, lr
 8000342:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000346:	fb06 f107 	mul.w	r1, r6, r7
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000356:	f080 811f 	bcs.w	8000598 <__udivmoddi4+0x298>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 811c 	bls.w	8000598 <__udivmoddi4+0x298>
 8000360:	3e02      	subs	r6, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a5b      	subs	r3, r3, r1
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb3 f0f8 	udiv	r0, r3, r8
 800036c:	fb08 3310 	mls	r3, r8, r0, r3
 8000370:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000374:	fb00 f707 	mul.w	r7, r0, r7
 8000378:	42a7      	cmp	r7, r4
 800037a:	d90a      	bls.n	8000392 <__udivmoddi4+0x92>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000384:	f080 810a 	bcs.w	800059c <__udivmoddi4+0x29c>
 8000388:	42a7      	cmp	r7, r4
 800038a:	f240 8107 	bls.w	800059c <__udivmoddi4+0x29c>
 800038e:	4464      	add	r4, ip
 8000390:	3802      	subs	r0, #2
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	1be4      	subs	r4, r4, r7
 8000398:	2600      	movs	r6, #0
 800039a:	b11d      	cbz	r5, 80003a4 <__udivmoddi4+0xa4>
 800039c:	40d4      	lsrs	r4, r2
 800039e:	2300      	movs	r3, #0
 80003a0:	e9c5 4300 	strd	r4, r3, [r5]
 80003a4:	4631      	mov	r1, r6
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0xc2>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80ef 	beq.w	8000592 <__udivmoddi4+0x292>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x160>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xd4>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80f9 	bhi.w	80005c6 <__udivmoddi4+0x2c6>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0303 	sbc.w	r3, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	469e      	mov	lr, r3
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0e0      	beq.n	80003a4 <__udivmoddi4+0xa4>
 80003e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003e6:	e7dd      	b.n	80003a4 <__udivmoddi4+0xa4>
 80003e8:	b902      	cbnz	r2, 80003ec <__udivmoddi4+0xec>
 80003ea:	deff      	udf	#255	; 0xff
 80003ec:	fab2 f282 	clz	r2, r2
 80003f0:	2a00      	cmp	r2, #0
 80003f2:	f040 8092 	bne.w	800051a <__udivmoddi4+0x21a>
 80003f6:	eba1 010c 	sub.w	r1, r1, ip
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2601      	movs	r6, #1
 8000404:	0c20      	lsrs	r0, r4, #16
 8000406:	fbb1 f3f7 	udiv	r3, r1, r7
 800040a:	fb07 1113 	mls	r1, r7, r3, r1
 800040e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000412:	fb0e f003 	mul.w	r0, lr, r3
 8000416:	4288      	cmp	r0, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x12c>
 800041a:	eb1c 0101 	adds.w	r1, ip, r1
 800041e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x12a>
 8000424:	4288      	cmp	r0, r1
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2c0>
 800042a:	4643      	mov	r3, r8
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1110 	mls	r1, r7, r0, r1
 8000438:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x156>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x154>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2ca>
 8000454:	4608      	mov	r0, r1
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800045e:	e79c      	b.n	800039a <__udivmoddi4+0x9a>
 8000460:	f1c6 0720 	rsb	r7, r6, #32
 8000464:	40b3      	lsls	r3, r6
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa20 f407 	lsr.w	r4, r0, r7
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	431c      	orrs	r4, r3
 8000478:	40f9      	lsrs	r1, r7
 800047a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047e:	fa00 f306 	lsl.w	r3, r0, r6
 8000482:	fbb1 f8f9 	udiv	r8, r1, r9
 8000486:	0c20      	lsrs	r0, r4, #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fb09 1118 	mls	r1, r9, r8, r1
 8000490:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000494:	fb08 f00e 	mul.w	r0, r8, lr
 8000498:	4288      	cmp	r0, r1
 800049a:	fa02 f206 	lsl.w	r2, r2, r6
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b8>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2bc>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2bc>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1a09      	subs	r1, r1, r0
 80004ba:	b2a4      	uxth	r4, r4
 80004bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c0:	fb09 1110 	mls	r1, r9, r0, r1
 80004c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004cc:	458e      	cmp	lr, r1
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1e2>
 80004d0:	eb1c 0101 	adds.w	r1, ip, r1
 80004d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2b4>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2b4>
 80004de:	3802      	subs	r0, #2
 80004e0:	4461      	add	r1, ip
 80004e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004e6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ea:	eba1 010e 	sub.w	r1, r1, lr
 80004ee:	42a1      	cmp	r1, r4
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46a6      	mov	lr, r4
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x2a4>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x2a0>
 80004f8:	b15d      	cbz	r5, 8000512 <__udivmoddi4+0x212>
 80004fa:	ebb3 0208 	subs.w	r2, r3, r8
 80004fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000502:	fa01 f707 	lsl.w	r7, r1, r7
 8000506:	fa22 f306 	lsr.w	r3, r2, r6
 800050a:	40f1      	lsrs	r1, r6
 800050c:	431f      	orrs	r7, r3
 800050e:	e9c5 7100 	strd	r7, r1, [r5]
 8000512:	2600      	movs	r6, #0
 8000514:	4631      	mov	r1, r6
 8000516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	40d8      	lsrs	r0, r3
 8000520:	fa0c fc02 	lsl.w	ip, ip, r2
 8000524:	fa21 f303 	lsr.w	r3, r1, r3
 8000528:	4091      	lsls	r1, r2
 800052a:	4301      	orrs	r1, r0
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb3 f0f7 	udiv	r0, r3, r7
 8000538:	fb07 3610 	mls	r6, r7, r0, r3
 800053c:	0c0b      	lsrs	r3, r1, #16
 800053e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000542:	fb00 f60e 	mul.w	r6, r0, lr
 8000546:	429e      	cmp	r6, r3
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x260>
 800054e:	eb1c 0303 	adds.w	r3, ip, r3
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b8>
 8000558:	429e      	cmp	r6, r3
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b8>
 800055c:	3802      	subs	r0, #2
 800055e:	4463      	add	r3, ip
 8000560:	1b9b      	subs	r3, r3, r6
 8000562:	b289      	uxth	r1, r1
 8000564:	fbb3 f6f7 	udiv	r6, r3, r7
 8000568:	fb07 3316 	mls	r3, r7, r6, r3
 800056c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000570:	fb06 f30e 	mul.w	r3, r6, lr
 8000574:	428b      	cmp	r3, r1
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x28a>
 8000578:	eb1c 0101 	adds.w	r1, ip, r1
 800057c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000582:	428b      	cmp	r3, r1
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	1ac9      	subs	r1, r1, r3
 800058c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0x104>
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e705      	b.n	80003a4 <__udivmoddi4+0xa4>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e3      	b.n	8000364 <__udivmoddi4+0x64>
 800059c:	4618      	mov	r0, r3
 800059e:	e6f8      	b.n	8000392 <__udivmoddi4+0x92>
 80005a0:	454b      	cmp	r3, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f8>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f8>
 80005b0:	4646      	mov	r6, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x28a>
 80005b4:	4620      	mov	r0, r4
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1e2>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x260>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b8>
 80005c0:	3b02      	subs	r3, #2
 80005c2:	4461      	add	r1, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x12c>
 80005c6:	4630      	mov	r0, r6
 80005c8:	e709      	b.n	80003de <__udivmoddi4+0xde>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x156>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <init_thread_stack>:
   printf("FAIL: first task was clobbered\r\n");
   while (1);
}

int init_thread_stack(TCB *task)
{
 80005d4:	b4b0      	push	{r4, r5, r7}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    for (int i = 1; i < MAX_TASKS; i++) {
 80005dc:	2301      	movs	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	e0e8      	b.n	80007b4 <init_thread_stack+0x1e0>

        if (tcb_array[i].state == DORMANT && tcb_array[i].stack_size >= task->stack_size) {
 80005e2:	497a      	ldr	r1, [pc, #488]	; (80007cc <init_thread_stack+0x1f8>)
 80005e4:	697a      	ldr	r2, [r7, #20]
 80005e6:	4613      	mov	r3, r2
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	440b      	add	r3, r1
 80005f0:	330c      	adds	r3, #12
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d168      	bne.n	80006ca <init_thread_stack+0xf6>
 80005f8:	4974      	ldr	r1, [pc, #464]	; (80007cc <init_thread_stack+0x1f8>)
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	4613      	mov	r3, r2
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	440b      	add	r3, r1
 8000606:	330e      	adds	r3, #14
 8000608:	881a      	ldrh	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	89db      	ldrh	r3, [r3, #14]
 800060e:	429a      	cmp	r2, r3
 8000610:	d35b      	bcc.n	80006ca <init_thread_stack+0xf6>
            task->stack_size = tcb_array[i].stack_size;
 8000612:	496e      	ldr	r1, [pc, #440]	; (80007cc <init_thread_stack+0x1f8>)
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	4613      	mov	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	4413      	add	r3, r2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	440b      	add	r3, r1
 8000620:	330e      	adds	r3, #14
 8000622:	881a      	ldrh	r2, [r3, #0]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	81da      	strh	r2, [r3, #14]
            task->state = READY;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2201      	movs	r2, #1
 800062c:	731a      	strb	r2, [r3, #12]

            //difference from making a new task
            task->stackptr = tcb_array[i].stackptr;
 800062e:	4967      	ldr	r1, [pc, #412]	; (80007cc <init_thread_stack+0x1f8>)
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	4613      	mov	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	440b      	add	r3, r1
 800063c:	3310      	adds	r3, #16
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	611a      	str	r2, [r3, #16]
            task->stack_high = tcb_array[i].stackptr;
 8000644:	4961      	ldr	r1, [pc, #388]	; (80007cc <init_thread_stack+0x1f8>)
 8000646:	697a      	ldr	r2, [r7, #20]
 8000648:	4613      	mov	r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	4413      	add	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	440b      	add	r3, r1
 8000652:	3310      	adds	r3, #16
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	605a      	str	r2, [r3, #4]

            *(--task->stack_high) = 1 << 24;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	1f1a      	subs	r2, r3, #4
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800066c:	601a      	str	r2, [r3, #0]
            *(--task->stack_high) = (U32) (task->ptask);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6819      	ldr	r1, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	1f1a      	subs	r2, r3, #4
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	460a      	mov	r2, r1
 8000682:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < 14; i++) {
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	e00c      	b.n	80006a4 <init_thread_stack+0xd0>
                *(--task->stack_high) = 0xCAFE;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	1f1a      	subs	r2, r3, #4
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 800069c:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < 14; i++) {
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	3301      	adds	r3, #1
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	2b0d      	cmp	r3, #13
 80006a8:	ddef      	ble.n	800068a <init_thread_stack+0xb6>
            }

            tcb_array[i] = *task;
 80006aa:	4948      	ldr	r1, [pc, #288]	; (80007cc <init_thread_stack+0x1f8>)
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	4613      	mov	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	4413      	add	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	18ca      	adds	r2, r1, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4614      	mov	r4, r2
 80006bc:	461d      	mov	r5, r3
 80006be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c2:	682b      	ldr	r3, [r5, #0]
 80006c4:	6023      	str	r3, [r4, #0]
            return RTX_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e07a      	b.n	80007c0 <init_thread_stack+0x1ec>
        }

        // this means we are at the bottom of our current running stack
        else if (tcb_array[i].state == NULL && tcb_array[i].state == 0){
 80006ca:	4940      	ldr	r1, [pc, #256]	; (80007cc <init_thread_stack+0x1f8>)
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	4613      	mov	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	4413      	add	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	440b      	add	r3, r1
 80006d8:	330c      	adds	r3, #12
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d166      	bne.n	80007ae <init_thread_stack+0x1da>
 80006e0:	493a      	ldr	r1, [pc, #232]	; (80007cc <init_thread_stack+0x1f8>)
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	4613      	mov	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	440b      	add	r3, r1
 80006ee:	330c      	adds	r3, #12
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d15b      	bne.n	80007ae <init_thread_stack+0x1da>
            if (task_counter == 0) {
 80006f6:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <init_thread_stack+0x1fc>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d107      	bne.n	800070e <init_thread_stack+0x13a>
                task->stackptr = (int) MSP_INIT_VAL - MAIN_STACK_SIZE;
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <init_thread_stack+0x200>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000706:	461a      	mov	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	e010      	b.n	8000730 <init_thread_stack+0x15c>
            } else {
                task->stackptr = tcb_array[i-1].stackptr - task->stack_size;
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	492e      	ldr	r1, [pc, #184]	; (80007cc <init_thread_stack+0x1f8>)
 8000714:	4613      	mov	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	440b      	add	r3, r1
 800071e:	3310      	adds	r3, #16
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	89db      	ldrh	r3, [r3, #14]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	425b      	negs	r3, r3
 800072a:	441a      	add	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	611a      	str	r2, [r3, #16]
            }
            task->stack_high = task->stackptr;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	691a      	ldr	r2, [r3, #16]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	605a      	str	r2, [r3, #4]
            task->state = READY;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2201      	movs	r2, #1
 800073c:	731a      	strb	r2, [r3, #12]
            *(--task->stack_high) = 1 << 24;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	1f1a      	subs	r2, r3, #4
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000750:	601a      	str	r2, [r3, #0]
            *(--task->stack_high) = (U32) (task->ptask);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6819      	ldr	r1, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	1f1a      	subs	r2, r3, #4
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	460a      	mov	r2, r1
 8000766:	601a      	str	r2, [r3, #0]
            // not enough space left in the stack for our currnt task
            for (int i = 0; i < 14; i++) {
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e00c      	b.n	8000788 <init_thread_stack+0x1b4>
                *(--task->stack_high) = 0xCAFE;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	1f1a      	subs	r2, r3, #4
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 8000780:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < 14; i++) {
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	3301      	adds	r3, #1
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b0d      	cmp	r3, #13
 800078c:	ddef      	ble.n	800076e <init_thread_stack+0x19a>
            }
            tcb_array[i] = *task;
 800078e:	490f      	ldr	r1, [pc, #60]	; (80007cc <init_thread_stack+0x1f8>)
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	4613      	mov	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	18ca      	adds	r2, r1, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4614      	mov	r4, r2
 80007a0:	461d      	mov	r5, r3
 80007a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a6:	682b      	ldr	r3, [r5, #0]
 80007a8:	6023      	str	r3, [r4, #0]
            return RTX_OK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e008      	b.n	80007c0 <init_thread_stack+0x1ec>
    for (int i = 1; i < MAX_TASKS; i++) {
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	3301      	adds	r3, #1
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	2b0f      	cmp	r3, #15
 80007b8:	f77f af13 	ble.w	80005e2 <init_thread_stack+0xe>
        }
    }

    return -1;
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	371c      	adds	r7, #28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bcb0      	pop	{r4, r5, r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000090 	.word	0x20000090
 80007d0:	200001dc 	.word	0x200001dc
 80007d4:	200001e0 	.word	0x200001e0

080007d8 <osKernelInit>:



void osKernelInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
    if (kernel_initialized)
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <osKernelInit+0x3c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d111      	bne.n	8000808 <osKernelInit+0x30>
        return;

    kernel_initialized = 1;
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <osKernelInit+0x3c>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]

    MSP_INIT_VAL = *(U32 **)0x0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <osKernelInit+0x40>)
 80007f2:	601a      	str	r2, [r3, #0]
    current_task = NULL;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <osKernelInit+0x44>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
    bottom = (U32)MSP_INIT_VAL - MAIN_STACK_SIZE;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <osKernelInit+0x40>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8000802:	4a07      	ldr	r2, [pc, #28]	; (8000820 <osKernelInit+0x48>)
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	e000      	b.n	800080a <osKernelInit+0x32>
        return;
 8000808:	bf00      	nop
    // stackptr = (U32 *)((U32)MSP_INIT_VAL - THREAD_STACK_SIZE);


    // Initialize current task to NULL
}
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	200001d8 	.word	0x200001d8
 8000818:	200001e0 	.word	0x200001e0
 800081c:	200001d0 	.word	0x200001d0
 8000820:	2000008c 	.word	0x2000008c

08000824 <osCreateTask>:

int osCreateTask(TCB *task)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]

    // this must be dynamically allocated
    if (kernel_initialized == 0)
 800082c:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <osCreateTask+0xc4>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <osCreateTask+0x16>
        return RTX_ERROR;
 8000834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000838:	e051      	b.n	80008de <osCreateTask+0xba>
    
     // Task stack size must be greater than STACK_SIZE
    if (task->stack_size < STACK_SIZE)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	89db      	ldrh	r3, [r3, #14]
 800083e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000842:	d202      	bcs.n	800084a <osCreateTask+0x26>
    {
        return RTX_ERROR;
 8000844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000848:	e049      	b.n	80008de <osCreateTask+0xba>
    }

    if (task->ptask == NULL) {
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d102      	bne.n	8000858 <osCreateTask+0x34>
        return RTX_ERROR;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000856:	e042      	b.n	80008de <osCreateTask+0xba>
    }

    if (task_counter >= MAX_TASKS) {
 8000858:	4b24      	ldr	r3, [pc, #144]	; (80008ec <osCreateTask+0xc8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	dd02      	ble.n	8000866 <osCreateTask+0x42>
        return RTX_ERROR;
 8000860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000864:	e03b      	b.n	80008de <osCreateTask+0xba>
    }

    // Task stack size must be multiple of 8
    if (task->stack_size % 8 != 0)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	89db      	ldrh	r3, [r3, #14]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	b29b      	uxth	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d008      	beq.n	8000886 <osCreateTask+0x62>
    {
        // adjust task->stack_size
        task->stack_size += (8 - (task->stack_size % 8));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	89db      	ldrh	r3, [r3, #14]
 8000878:	f023 0307 	bic.w	r3, r3, #7
 800087c:	b29b      	uxth	r3, r3
 800087e:	3308      	adds	r3, #8
 8000880:	b29a      	uxth	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	81da      	strh	r2, [r3, #14]
    }
    task->tid = 0;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    for (int i = 1; i < 16; i++) {
 800088c:	2301      	movs	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e011      	b.n	80008b6 <osCreateTask+0x92>
        if (tcb_array[i].state == DORMANT) {
 8000892:	4917      	ldr	r1, [pc, #92]	; (80008f0 <osCreateTask+0xcc>)
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	4613      	mov	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	440b      	add	r3, r1
 80008a0:	330c      	adds	r3, #12
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d103      	bne.n	80008b0 <osCreateTask+0x8c>
            task->tid = i;
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	609a      	str	r2, [r3, #8]
            break;
 80008ae:	e005      	b.n	80008bc <osCreateTask+0x98>
    for (int i = 1; i < 16; i++) {
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	3301      	adds	r3, #1
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2b0f      	cmp	r3, #15
 80008ba:	ddea      	ble.n	8000892 <osCreateTask+0x6e>
        }
    }

    int return_value = init_thread_stack(task);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff fe89 	bl	80005d4 <init_thread_stack>
 80008c2:	60b8      	str	r0, [r7, #8]
    if (return_value == -1){
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008ca:	d102      	bne.n	80008d2 <osCreateTask+0xae>
        return RTX_ERROR;
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d0:	e005      	b.n	80008de <osCreateTask+0xba>
    }
    task_counter++;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <osCreateTask+0xc8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a04      	ldr	r2, [pc, #16]	; (80008ec <osCreateTask+0xc8>)
 80008da:	6013      	str	r3, [r2, #0]

    return RTX_OK; // Max tasks reached
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200001d8 	.word	0x200001d8
 80008ec:	200001dc 	.word	0x200001dc
 80008f0:	20000090 	.word	0x20000090

080008f4 <osKernelStart>:

int osKernelStart(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
    if (kernel_initialized == 0)
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <osKernelStart+0x34>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <osKernelStart+0x12>
        return RTX_ERROR;
 8000900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000904:	e00b      	b.n	800091e <osKernelStart+0x2a>

    if (kernel_running)
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <osKernelStart+0x38>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <osKernelStart+0x20>
        return RTX_ERROR;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000912:	e004      	b.n	800091e <osKernelStart+0x2a>

    kernel_running = 1;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <osKernelStart+0x38>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]

    __asm("SVC #1");
 800091a:	df01      	svc	1

    return RTX_OK;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	200001d8 	.word	0x200001d8
 800092c:	200001d9 	.word	0x200001d9

08000930 <osYield>:

void osYield(void) {
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
    if (kernel_initialized == 0)
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <osYield+0x28>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d005      	beq.n	8000948 <osYield+0x18>
        return;

    if (kernel_running == 0)
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <osYield+0x2c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d003      	beq.n	800094c <osYield+0x1c>
        return;

    __asm("SVC #2");
 8000944:	df02      	svc	2
 8000946:	e002      	b.n	800094e <osYield+0x1e>
        return;
 8000948:	bf00      	nop
 800094a:	e000      	b.n	800094e <osYield+0x1e>
        return;
 800094c:	bf00      	nop

}
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	200001d8 	.word	0x200001d8
 800095c:	200001d9 	.word	0x200001d9

08000960 <is_empty>:
        return TID_NULL;

    return current_task->tid;
}

int is_empty() {
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
    for(int i = 1; i < 16; i++){
 8000966:	2301      	movs	r3, #1
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	e00f      	b.n	800098c <is_empty+0x2c>
        if (tcb_array[i].state != DORMANT){
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <is_empty+0x40>)
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4613      	mov	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4413      	add	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	440b      	add	r3, r1
 800097a:	330c      	adds	r3, #12
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <is_empty+0x26>
            return 0;
 8000982:	2300      	movs	r3, #0
 8000984:	e006      	b.n	8000994 <is_empty+0x34>
    for(int i = 1; i < 16; i++){
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3301      	adds	r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b0f      	cmp	r3, #15
 8000990:	ddec      	ble.n	800096c <is_empty+0xc>
        }
    }
    return 1;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	20000090 	.word	0x20000090

080009a4 <scheduler>:

void scheduler(){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
    if(!is_empty()){
 80009aa:	f7ff ffd9 	bl	8000960 <is_empty>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d178      	bne.n	8000aa6 <scheduler+0x102>
        if(current_task != NULL && tcb_array[current_task->tid].state != DORMANT){
 80009b4:	4b3d      	ldr	r3, [pc, #244]	; (8000aac <scheduler+0x108>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d028      	beq.n	8000a0e <scheduler+0x6a>
 80009bc:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <scheduler+0x108>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	493b      	ldr	r1, [pc, #236]	; (8000ab0 <scheduler+0x10c>)
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	440b      	add	r3, r1
 80009ce:	330c      	adds	r3, #12
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d01b      	beq.n	8000a0e <scheduler+0x6a>
            tcb_array[current_task->tid].state = READY;
 80009d6:	4b35      	ldr	r3, [pc, #212]	; (8000aac <scheduler+0x108>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	689a      	ldr	r2, [r3, #8]
 80009dc:	4934      	ldr	r1, [pc, #208]	; (8000ab0 <scheduler+0x10c>)
 80009de:	4613      	mov	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	440b      	add	r3, r1
 80009e8:	330c      	adds	r3, #12
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PSP(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80009ee:	f3ef 8309 	mrs	r3, PSP
 80009f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80009f4:	68b9      	ldr	r1, [r7, #8]
            tcb_array[current_task->tid].stack_high = __get_PSP();
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <scheduler+0x108>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	4608      	mov	r0, r1
 80009fe:	492c      	ldr	r1, [pc, #176]	; (8000ab0 <scheduler+0x10c>)
 8000a00:	4613      	mov	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	440b      	add	r3, r1
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	6018      	str	r0, [r3, #0]
        }
        int start_index = current_tid_index;
 8000a0e:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <scheduler+0x110>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	60fb      	str	r3, [r7, #12]
        do {
            current_tid_index = current_tid_index == 0 ? 1 : (current_tid_index + 1) % MAX_TASKS;
 8000a14:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <scheduler+0x110>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d00a      	beq.n	8000a32 <scheduler+0x8e>
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <scheduler+0x110>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	425a      	negs	r2, r3
 8000a24:	f003 030f 	and.w	r3, r3, #15
 8000a28:	f002 020f 	and.w	r2, r2, #15
 8000a2c:	bf58      	it	pl
 8000a2e:	4253      	negpl	r3, r2
 8000a30:	e000      	b.n	8000a34 <scheduler+0x90>
 8000a32:	2301      	movs	r3, #1
 8000a34:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <scheduler+0x110>)
 8000a36:	6013      	str	r3, [r2, #0]
            if (tcb_array[current_tid_index].state == READY){
 8000a38:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <scheduler+0x110>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	491c      	ldr	r1, [pc, #112]	; (8000ab0 <scheduler+0x10c>)
 8000a3e:	4613      	mov	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	440b      	add	r3, r1
 8000a48:	330c      	adds	r3, #12
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d125      	bne.n	8000a9c <scheduler+0xf8>
                tcb_array[current_tid_index].state = RUNNING;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <scheduler+0x110>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4916      	ldr	r1, [pc, #88]	; (8000ab0 <scheduler+0x10c>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	440b      	add	r3, r1
 8000a60:	330c      	adds	r3, #12
 8000a62:	2202      	movs	r2, #2
 8000a64:	701a      	strb	r2, [r3, #0]
                current_task = &tcb_array[current_tid_index];
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <scheduler+0x110>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <scheduler+0x10c>)
 8000a74:	4413      	add	r3, r2
 8000a76:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <scheduler+0x108>)
 8000a78:	6013      	str	r3, [r2, #0]
                __set_PSP((uint32_t)tcb_array[current_task->tid].stack_high);
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <scheduler+0x108>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	490b      	ldr	r1, [pc, #44]	; (8000ab0 <scheduler+0x10c>)
 8000a82:	4613      	mov	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f383 8809 	msr	PSP, r3
}
 8000a98:	bf00      	nop
                return;
 8000a9a:	e004      	b.n	8000aa6 <scheduler+0x102>
            }
        } while (current_tid_index != start_index);
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <scheduler+0x110>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d1b6      	bne.n	8000a14 <scheduler+0x70>
    }
}
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200001d0 	.word	0x200001d0
 8000ab0:	20000090 	.word	0x20000090
 8000ab4:	200001d4 	.word	0x200001d4

08000ab8 <osTaskExit>:

// NOTE: Currently, when a task exits, it is not removed from `tcb_array` - its state is set to `DORMANT`.
// In the future, we should handle removing tasks from `tcb_array` when they exit (i.e memory allocation).
int osTaskExit(void) {
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
    if (kernel_initialized == 0)
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <osTaskExit+0x60>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <osTaskExit+0x12>
        return RTX_ERROR;
 8000ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ac8:	e021      	b.n	8000b0e <osTaskExit+0x56>

    if (kernel_running == 0)
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <osTaskExit+0x64>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <osTaskExit+0x20>
        return RTX_ERROR;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ad6:	e01a      	b.n	8000b0e <osTaskExit+0x56>

    if (current_task->tid == 0)
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <osTaskExit+0x68>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <osTaskExit+0x30>
        return RTX_ERROR;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae6:	e012      	b.n	8000b0e <osTaskExit+0x56>

    tcb_array[current_task->tid].state = DORMANT;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <osTaskExit+0x68>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	689a      	ldr	r2, [r3, #8]
 8000aee:	490d      	ldr	r1, [pc, #52]	; (8000b24 <osTaskExit+0x6c>)
 8000af0:	4613      	mov	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	440b      	add	r3, r1
 8000afa:	330c      	adds	r3, #12
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]

    task_counter--;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <osTaskExit+0x70>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <osTaskExit+0x70>)
 8000b08:	6013      	str	r3, [r2, #0]
    __asm("SVC #2");
 8000b0a:	df02      	svc	2

    return RTX_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	200001d8 	.word	0x200001d8
 8000b1c:	200001d9 	.word	0x200001d9
 8000b20:	200001d0 	.word	0x200001d0
 8000b24:	20000090 	.word	0x20000090
 8000b28:	200001dc 	.word	0x200001dc

08000b2c <SVC_Handler_Main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
void SVC_Handler_Main(unsigned int *svc_args)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
    // Get the SVC number from the instruction
    unsigned int svc_number = ((char *)svc_args[6])[-2];
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3318      	adds	r3, #24
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3b02      	subs	r3, #2
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	60fb      	str	r3, [r7, #12]

    if (svc_number == THREAD_SWITCH_SVC)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d102      	bne.n	8000b4c <SVC_Handler_Main+0x20>
    {

        firstThread();
 8000b46:	f7ff fb65 	bl	8000214 <firstThread>

        SCB->ICSR |= 1 << 28;
        __asm("isb");

    }
}
 8000b4a:	e00a      	b.n	8000b62 <SVC_Handler_Main+0x36>
    else if (svc_number == 2){
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d107      	bne.n	8000b62 <SVC_Handler_Main+0x36>
        SCB->ICSR |= 1 << 28;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <SVC_Handler_Main+0x40>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SVC_Handler_Main+0x40>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6053      	str	r3, [r2, #4]
        __asm("isb");
 8000b5e:	f3bf 8f6f 	isb	sy
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <Task1>:

const U32 THREAD_STACK_SIZE = 0x400; // 1024 bytes

int i_test = 0;

void Task1(void *ptr) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	i_test++;
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <Task1+0x38>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <Task1+0x38>)
 8000b80:	6013      	str	r3, [r2, #0]
	osYield();
 8000b82:	f7ff fed5 	bl	8000930 <osYield>

	//instead of a while loop, keep recreating itself and exiting
	TCB st_mytask;
	st_mytask.ptask = &Task1;
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <Task1+0x3c>)
 8000b88:	60fb      	str	r3, [r7, #12]
	st_mytask.stack_size = 0x400;
 8000b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b8e:	837b      	strh	r3, [r7, #26]
	osCreateTask(&st_mytask);
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fe45 	bl	8000824 <osCreateTask>
	osTaskExit();
 8000b9a:	f7ff ff8d 	bl	8000ab8 <osTaskExit>
}
 8000b9e:	bf00      	nop
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001e4 	.word	0x200001e4
 8000bac:	08000b71 	.word	0x08000b71

08000bb0 <Task2>:

void Task2(void *ptr) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	while(1){
		printf("Back to you %d\r\n",i_test);
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <Task2+0x1c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <Task2+0x20>)
 8000bc0:	f001 fe36 	bl	8002830 <iprintf>
		osYield();
 8000bc4:	f7ff feb4 	bl	8000930 <osYield>
		printf("Back to you %d\r\n",i_test);
 8000bc8:	e7f6      	b.n	8000bb8 <Task2+0x8>
 8000bca:	bf00      	nop
 8000bcc:	200001e4 	.word	0x200001e4
 8000bd0:	08003770 	.word	0x08003770

08000bd4 <main>:
	}
}

 int main(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
   /* MCU Configuration: Don't change this or the whole chip won't work!*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000bda:	f000 faa7 	bl	800112c <HAL_Init>
   /* Configure the system clock */
   SystemClock_Config();
 8000bde:	f000 f971 	bl	8000ec4 <SystemClock_Config>

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000be2:	f000 fa05 	bl	8000ff0 <MX_GPIO_Init>
   MX_USART2_UART_Init();
 8000be6:	f000 f9d9 	bl	8000f9c <MX_USART2_UART_Init>
   /* MCU Configuration is now complete. Start writing your code below this line */

   osKernelInit();
 8000bea:	f7ff fdf5 	bl	80007d8 <osKernelInit>

   TCB st_mytask;
   st_mytask.stack_size = 0x400;
 8000bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf2:	827b      	strh	r3, [r7, #18]

   st_mytask.ptask = &Task1;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <main+0x40>)
 8000bf6:	607b      	str	r3, [r7, #4]
   osCreateTask(&st_mytask);
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fe12 	bl	8000824 <osCreateTask>

   st_mytask.ptask = &Task2;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <main+0x44>)
 8000c02:	607b      	str	r3, [r7, #4]
   osCreateTask(&st_mytask);
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fe0c 	bl	8000824 <osCreateTask>

   osKernelStart();
 8000c0c:	f7ff fe72 	bl	80008f4 <osKernelStart>

   while (1);
 8000c10:	e7fe      	b.n	8000c10 <main+0x3c>
 8000c12:	bf00      	nop
 8000c14:	08000b71 	.word	0x08000b71
 8000c18:	08000bb1 	.word	0x08000bb1

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c5a:	2007      	movs	r0, #7
 8000c5c:	f000 fb8a 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_UART_MspInit+0x84>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12b      	bne.n	8000ce6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cc6:	230c      	movs	r3, #12
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <HAL_UART_MspInit+0x8c>)
 8000ce2:	f000 fb7b 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	; 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40004400 	.word	0x40004400
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020000 	.word	0x40020000

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <NMI_Handler+0x4>

08000d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <HardFault_Handler+0x4>

08000d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <MemManage_Handler+0x4>

08000d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d2c:	f000 fa50 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e00a      	b.n	8000d5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d46:	f3af 8000 	nop.w
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbf0      	blt.n	8000d46 <_read+0x12>
  }

  return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e009      	b.n	8000d94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	60ba      	str	r2, [r7, #8]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f889 	bl	8000ea0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf1      	blt.n	8000d80 <_write+0x12>
  }
  return len;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_close>:

int _close(int file)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dce:	605a      	str	r2, [r3, #4]
  return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_isatty>:

int _isatty(int file)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f001 fcc4 	bl	80027cc <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20018000 	.word	0x20018000
 8000e70:	00004000 	.word	0x00004000
 8000e74:	200001e8 	.word	0x200001e8
 8000e78:	20000248 	.word	0x20000248

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__io_putchar>:
//Needed for printf
UART_HandleTypeDef huart2;


int __io_putchar(int ch)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,&ch,1,HAL_MAX_DELAY);
 8000ea8:	1d39      	adds	r1, r7, #4
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <__io_putchar+0x20>)
 8000eb2:	f001 f916 	bl	80020e2 <HAL_UART_Transmit>
	return ch;
 8000eb6:	687b      	ldr	r3, [r7, #4]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001ec 	.word	0x200001ec

08000ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b094      	sub	sp, #80	; 0x50
 8000ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eca:	f107 0320 	add.w	r3, r7, #32
 8000ece:	2230      	movs	r2, #48	; 0x30
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fca4 	bl	8002820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <SystemClock_Config+0xd0>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a28      	ldr	r2, [pc, #160]	; (8000f94 <SystemClock_Config+0xd0>)
 8000ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef8:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <SystemClock_Config+0xd0>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <SystemClock_Config+0xd4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f10:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <SystemClock_Config+0xd4>)
 8000f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <SystemClock_Config+0xd4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f24:	2302      	movs	r3, #2
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f30:	2302      	movs	r3, #2
 8000f32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f38:	2310      	movs	r3, #16
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f42:	2304      	movs	r3, #4
 8000f44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f46:	2307      	movs	r3, #7
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fbe2 	bl	8001718 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f5a:	f000 f8b7 	bl	80010cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	2302      	movs	r3, #2
 8000f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fe44 	bl	8001c08 <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f86:	f000 f8a1 	bl	80010cc <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	; 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <MX_USART2_UART_Init+0x50>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	f001 f838 	bl	8002048 <HAL_UART_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fde:	f000 f875 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200001ec 	.word	0x200001ec
 8000fec:	40004400 	.word	0x40004400

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <MX_GPIO_Init+0xd0>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a2c      	ldr	r2, [pc, #176]	; (80010c0 <MX_GPIO_Init+0xd0>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <MX_GPIO_Init+0xd0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <MX_GPIO_Init+0xd0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a25      	ldr	r2, [pc, #148]	; (80010c0 <MX_GPIO_Init+0xd0>)
 800102c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <MX_GPIO_Init+0xd0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <MX_GPIO_Init+0xd0>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <MX_GPIO_Init+0xd0>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <MX_GPIO_Init+0xd0>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_GPIO_Init+0xd0>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <MX_GPIO_Init+0xd0>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_GPIO_Init+0xd0>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2120      	movs	r1, #32
 800107a:	4812      	ldr	r0, [pc, #72]	; (80010c4 <MX_GPIO_Init+0xd4>)
 800107c:	f000 fb32 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001086:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4619      	mov	r1, r3
 8001096:	480c      	ldr	r0, [pc, #48]	; (80010c8 <MX_GPIO_Init+0xd8>)
 8001098:	f000 f9a0 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800109c:	2320      	movs	r3, #32
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_GPIO_Init+0xd4>)
 80010b4:	f000 f992 	bl	80013dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020800 	.word	0x40020800

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <Error_Handler+0x8>
	...

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010de:	490e      	ldr	r1, [pc, #56]	; (8001118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e4:	e002      	b.n	80010ec <LoopCopyDataInit>

080010e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ea:	3304      	adds	r3, #4

080010ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f0:	d3f9      	bcc.n	80010e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f4:	4c0b      	ldr	r4, [pc, #44]	; (8001124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f8:	e001      	b.n	80010fe <LoopFillZerobss>

080010fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010fc:	3204      	adds	r2, #4

080010fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001100:	d3fb      	bcc.n	80010fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001102:	f7ff febb 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f001 fb67 	bl	80027d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fd63 	bl	8000bd4 <main>
  bx  lr    
 800110e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001110:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800111c:	08003844 	.word	0x08003844
  ldr r2, =_sbss
 8001120:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001124:	20000244 	.word	0x20000244

08001128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <HAL_Init+0x40>)
 8001136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_Init+0x40>)
 8001142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_Init+0x40>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f90d 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f808 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fd5c 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023c00 	.word	0x40023c00

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 f917 	bl	80013c2 <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011ac:	f000 f8ed 	bl	800138a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000230 	.word	0x20000230

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000230 	.word	0x20000230

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	; (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	; (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff47 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139c:	f7ff ff5c 	bl	8001258 <__NVIC_GetPriorityGrouping>
 80013a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	f7ff ff8e 	bl	80012c8 <NVIC_EncodePriority>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff5d 	bl	8001274 <__NVIC_SetPriority>
}
 80013ba:	bf00      	nop
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffb0 	bl	8001330 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b089      	sub	sp, #36	; 0x24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	e159      	b.n	80016ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f8:	2201      	movs	r2, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	f040 8148 	bne.w	80016a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d005      	beq.n	800142e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142a:	2b02      	cmp	r3, #2
 800142c:	d130      	bne.n	8001490 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68da      	ldr	r2, [r3, #12]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001464:	2201      	movs	r2, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	091b      	lsrs	r3, r3, #4
 800147a:	f003 0201 	and.w	r2, r3, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b03      	cmp	r3, #3
 800149a:	d017      	beq.n	80014cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d123      	bne.n	8001520 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	220f      	movs	r2, #15
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	69b9      	ldr	r1, [r7, #24]
 800151c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	2203      	movs	r2, #3
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0203 	and.w	r2, r3, #3
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80a2 	beq.w	80016a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b57      	ldr	r3, [pc, #348]	; (80016c4 <HAL_GPIO_Init+0x2e8>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a56      	ldr	r2, [pc, #344]	; (80016c4 <HAL_GPIO_Init+0x2e8>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b54      	ldr	r3, [pc, #336]	; (80016c4 <HAL_GPIO_Init+0x2e8>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157e:	4a52      	ldr	r2, [pc, #328]	; (80016c8 <HAL_GPIO_Init+0x2ec>)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	089b      	lsrs	r3, r3, #2
 8001584:	3302      	adds	r3, #2
 8001586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 0303 	and.w	r3, r3, #3
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	220f      	movs	r2, #15
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a49      	ldr	r2, [pc, #292]	; (80016cc <HAL_GPIO_Init+0x2f0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d019      	beq.n	80015de <HAL_GPIO_Init+0x202>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a48      	ldr	r2, [pc, #288]	; (80016d0 <HAL_GPIO_Init+0x2f4>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0x1fe>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a47      	ldr	r2, [pc, #284]	; (80016d4 <HAL_GPIO_Init+0x2f8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d00d      	beq.n	80015d6 <HAL_GPIO_Init+0x1fa>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a46      	ldr	r2, [pc, #280]	; (80016d8 <HAL_GPIO_Init+0x2fc>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d007      	beq.n	80015d2 <HAL_GPIO_Init+0x1f6>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a45      	ldr	r2, [pc, #276]	; (80016dc <HAL_GPIO_Init+0x300>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_GPIO_Init+0x1f2>
 80015ca:	2304      	movs	r3, #4
 80015cc:	e008      	b.n	80015e0 <HAL_GPIO_Init+0x204>
 80015ce:	2307      	movs	r3, #7
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x204>
 80015d2:	2303      	movs	r3, #3
 80015d4:	e004      	b.n	80015e0 <HAL_GPIO_Init+0x204>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_Init+0x204>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_GPIO_Init+0x204>
 80015de:	2300      	movs	r3, #0
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	f002 0203 	and.w	r2, r2, #3
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	4093      	lsls	r3, r2
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f0:	4935      	ldr	r1, [pc, #212]	; (80016c8 <HAL_GPIO_Init+0x2ec>)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fe:	4b38      	ldr	r3, [pc, #224]	; (80016e0 <HAL_GPIO_Init+0x304>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001622:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <HAL_GPIO_Init+0x304>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <HAL_GPIO_Init+0x304>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800164c:	4a24      	ldr	r2, [pc, #144]	; (80016e0 <HAL_GPIO_Init+0x304>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001652:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_GPIO_Init+0x304>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001676:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <HAL_GPIO_Init+0x304>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_GPIO_Init+0x304>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a0:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_GPIO_Init+0x304>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	f67f aea2 	bls.w	80013f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40013800 	.word	0x40013800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40013c00 	.word	0x40013c00

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001700:	e003      	b.n	800170a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	041a      	lsls	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	619a      	str	r2, [r3, #24]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e267      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d075      	beq.n	8001822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001736:	4b88      	ldr	r3, [pc, #544]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b04      	cmp	r3, #4
 8001740:	d00c      	beq.n	800175c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4b85      	ldr	r3, [pc, #532]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800174a:	2b08      	cmp	r3, #8
 800174c:	d112      	bne.n	8001774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174e:	4b82      	ldr	r3, [pc, #520]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800175a:	d10b      	bne.n	8001774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	4b7e      	ldr	r3, [pc, #504]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d05b      	beq.n	8001820 <HAL_RCC_OscConfig+0x108>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d157      	bne.n	8001820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e242      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d106      	bne.n	800178c <HAL_RCC_OscConfig+0x74>
 800177e:	4b76      	ldr	r3, [pc, #472]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a75      	ldr	r2, [pc, #468]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0xb0>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x98>
 8001796:	4b70      	ldr	r3, [pc, #448]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6f      	ldr	r2, [pc, #444]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b6d      	ldr	r3, [pc, #436]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a6c      	ldr	r2, [pc, #432]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xb0>
 80017b0:	4b69      	ldr	r3, [pc, #420]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a68      	ldr	r2, [pc, #416]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b66      	ldr	r3, [pc, #408]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a65      	ldr	r2, [pc, #404]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fd12 	bl	80011f8 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fd0e 	bl	80011f8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e207      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b5b      	ldr	r3, [pc, #364]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0xc0>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fcfe 	bl	80011f8 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fcfa 	bl	80011f8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1f3      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	4b51      	ldr	r3, [pc, #324]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0xe8>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d063      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800182e:	4b4a      	ldr	r3, [pc, #296]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001842:	2b08      	cmp	r3, #8
 8001844:	d11c      	bne.n	8001880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001846:	4b44      	ldr	r3, [pc, #272]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	4b41      	ldr	r3, [pc, #260]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_RCC_OscConfig+0x152>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e1c7      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4937      	ldr	r1, [pc, #220]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	e03a      	b.n	80018f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001888:	4b34      	ldr	r3, [pc, #208]	; (800195c <HAL_RCC_OscConfig+0x244>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff fcb3 	bl	80011f8 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff fcaf 	bl	80011f8 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e1a8      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4925      	ldr	r1, [pc, #148]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
 80018c8:	e015      	b.n	80018f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <HAL_RCC_OscConfig+0x244>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fc92 	bl	80011f8 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d8:	f7ff fc8e 	bl	80011f8 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e187      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d036      	beq.n	8001970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d016      	beq.n	8001938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_RCC_OscConfig+0x248>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff fc72 	bl	80011f8 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff fc6e 	bl	80011f8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e167      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_OscConfig+0x240>)
 800192c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x200>
 8001936:	e01b      	b.n	8001970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_OscConfig+0x248>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff fc5b 	bl	80011f8 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001944:	e00e      	b.n	8001964 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001946:	f7ff fc57 	bl	80011f8 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d907      	bls.n	8001964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e150      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
 8001958:	40023800 	.word	0x40023800
 800195c:	42470000 	.word	0x42470000
 8001960:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	4b88      	ldr	r3, [pc, #544]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1ea      	bne.n	8001946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8097 	beq.w	8001aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001982:	4b81      	ldr	r3, [pc, #516]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10f      	bne.n	80019ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	4b7d      	ldr	r3, [pc, #500]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a7c      	ldr	r2, [pc, #496]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b7a      	ldr	r3, [pc, #488]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019aa:	2301      	movs	r3, #1
 80019ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ae:	4b77      	ldr	r3, [pc, #476]	; (8001b8c <HAL_RCC_OscConfig+0x474>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d118      	bne.n	80019ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ba:	4b74      	ldr	r3, [pc, #464]	; (8001b8c <HAL_RCC_OscConfig+0x474>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a73      	ldr	r2, [pc, #460]	; (8001b8c <HAL_RCC_OscConfig+0x474>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c6:	f7ff fc17 	bl	80011f8 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ce:	f7ff fc13 	bl	80011f8 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e10c      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <HAL_RCC_OscConfig+0x474>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2ea>
 80019f4:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a63      	ldr	r2, [pc, #396]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001a00:	e01c      	b.n	8001a3c <HAL_RCC_OscConfig+0x324>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b05      	cmp	r3, #5
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x30c>
 8001a0a:	4b5f      	ldr	r3, [pc, #380]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a5e      	ldr	r2, [pc, #376]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
 8001a16:	4b5c      	ldr	r3, [pc, #368]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a5b      	ldr	r2, [pc, #364]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0x324>
 8001a24:	4b58      	ldr	r3, [pc, #352]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a28:	4a57      	ldr	r2, [pc, #348]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a30:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	4a54      	ldr	r2, [pc, #336]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a36:	f023 0304 	bic.w	r3, r3, #4
 8001a3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d015      	beq.n	8001a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff fbd8 	bl	80011f8 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fbd4 	bl	80011f8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0cb      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a62:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0ee      	beq.n	8001a4c <HAL_RCC_OscConfig+0x334>
 8001a6e:	e014      	b.n	8001a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a70:	f7ff fbc2 	bl	80011f8 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7ff fbbe 	bl	80011f8 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e0b5      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8e:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1ee      	bne.n	8001a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a9a:	7dfb      	ldrb	r3, [r7, #23]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d105      	bne.n	8001aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa0:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	4a38      	ldr	r2, [pc, #224]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80a1 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ab6:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d05c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d141      	bne.n	8001b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HAL_RCC_OscConfig+0x478>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fb92 	bl	80011f8 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff fb8e 	bl	80011f8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e087      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69da      	ldr	r2, [r3, #28]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	019b      	lsls	r3, r3, #6
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	491b      	ldr	r1, [pc, #108]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_RCC_OscConfig+0x478>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7ff fb67 	bl	80011f8 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7ff fb63 	bl	80011f8 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e05c      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x416>
 8001b4c:	e054      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_RCC_OscConfig+0x478>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff fb50 	bl	80011f8 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5c:	f7ff fb4c 	bl	80011f8 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e045      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_RCC_OscConfig+0x470>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x444>
 8001b7a:	e03d      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d107      	bne.n	8001b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e038      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <HAL_RCC_OscConfig+0x4ec>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d028      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d121      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d11a      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d111      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	085b      	lsrs	r3, r3, #1
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d107      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800

08001c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0cc      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b68      	ldr	r3, [pc, #416]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d90c      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b65      	ldr	r3, [pc, #404]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0b8      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	494d      	ldr	r1, [pc, #308]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d044      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d119      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e07f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc6:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e06f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e067      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce6:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f023 0203 	bic.w	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4934      	ldr	r1, [pc, #208]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf8:	f7ff fa7e 	bl	80011f8 <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d00:	f7ff fa7a 	bl	80011f8 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e04f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 020c 	and.w	r2, r3, #12
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d1eb      	bne.n	8001d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d20c      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e032      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4916      	ldr	r1, [pc, #88]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d8e:	f000 f821 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	490a      	ldr	r1, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	5ccb      	ldrb	r3, [r1, r3]
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f9de 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	08003784 	.word	0x08003784
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dd8:	b094      	sub	sp, #80	; 0x50
 8001dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	647b      	str	r3, [r7, #68]	; 0x44
 8001de0:	2300      	movs	r3, #0
 8001de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001de4:	2300      	movs	r3, #0
 8001de6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dec:	4b79      	ldr	r3, [pc, #484]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d00d      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0x40>
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	f200 80e1 	bhi.w	8001fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x34>
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e06:	e0db      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e08:	4b73      	ldr	r3, [pc, #460]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e0c:	e0db      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e0e:	4b73      	ldr	r3, [pc, #460]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8001e10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e12:	e0d8      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e14:	4b6f      	ldr	r3, [pc, #444]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e1e:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d063      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2a:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	099b      	lsrs	r3, r3, #6
 8001e30:	2200      	movs	r2, #0
 8001e32:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e3e:	2300      	movs	r3, #0
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
 8001e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e46:	4622      	mov	r2, r4
 8001e48:	462b      	mov	r3, r5
 8001e4a:	f04f 0000 	mov.w	r0, #0
 8001e4e:	f04f 0100 	mov.w	r1, #0
 8001e52:	0159      	lsls	r1, r3, #5
 8001e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e58:	0150      	lsls	r0, r2, #5
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4621      	mov	r1, r4
 8001e60:	1a51      	subs	r1, r2, r1
 8001e62:	6139      	str	r1, [r7, #16]
 8001e64:	4629      	mov	r1, r5
 8001e66:	eb63 0301 	sbc.w	r3, r3, r1
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e78:	4659      	mov	r1, fp
 8001e7a:	018b      	lsls	r3, r1, #6
 8001e7c:	4651      	mov	r1, sl
 8001e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e82:	4651      	mov	r1, sl
 8001e84:	018a      	lsls	r2, r1, #6
 8001e86:	4651      	mov	r1, sl
 8001e88:	ebb2 0801 	subs.w	r8, r2, r1
 8001e8c:	4659      	mov	r1, fp
 8001e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ea6:	4690      	mov	r8, r2
 8001ea8:	4699      	mov	r9, r3
 8001eaa:	4623      	mov	r3, r4
 8001eac:	eb18 0303 	adds.w	r3, r8, r3
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	462b      	mov	r3, r5
 8001eb4:	eb49 0303 	adc.w	r3, r9, r3
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	024b      	lsls	r3, r1, #9
 8001eca:	4621      	mov	r1, r4
 8001ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	024a      	lsls	r2, r1, #9
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eda:	2200      	movs	r2, #0
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ee4:	f7fe f9f4 	bl	80002d0 <__aeabi_uldivmod>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4613      	mov	r3, r2
 8001eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef0:	e058      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef2:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	099b      	lsrs	r3, r3, #6
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	4611      	mov	r1, r2
 8001efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f02:	623b      	str	r3, [r7, #32]
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
 8001f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f0c:	4642      	mov	r2, r8
 8001f0e:	464b      	mov	r3, r9
 8001f10:	f04f 0000 	mov.w	r0, #0
 8001f14:	f04f 0100 	mov.w	r1, #0
 8001f18:	0159      	lsls	r1, r3, #5
 8001f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f1e:	0150      	lsls	r0, r2, #5
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4641      	mov	r1, r8
 8001f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f2a:	4649      	mov	r1, r9
 8001f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f44:	ebb2 040a 	subs.w	r4, r2, sl
 8001f48:	eb63 050b 	sbc.w	r5, r3, fp
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	00eb      	lsls	r3, r5, #3
 8001f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f5a:	00e2      	lsls	r2, r4, #3
 8001f5c:	4614      	mov	r4, r2
 8001f5e:	461d      	mov	r5, r3
 8001f60:	4643      	mov	r3, r8
 8001f62:	18e3      	adds	r3, r4, r3
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	464b      	mov	r3, r9
 8001f68:	eb45 0303 	adc.w	r3, r5, r3
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	028b      	lsls	r3, r1, #10
 8001f7e:	4621      	mov	r1, r4
 8001f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f84:	4621      	mov	r1, r4
 8001f86:	028a      	lsls	r2, r1, #10
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	61fa      	str	r2, [r7, #28]
 8001f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f98:	f7fe f99a 	bl	80002d0 <__aeabi_uldivmod>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fbe:	e002      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3750      	adds	r7, #80	; 0x50
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	00f42400 	.word	0x00f42400
 8001fdc:	007a1200 	.word	0x007a1200

08001fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ffc:	f7ff fff0 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0a9b      	lsrs	r3, r3, #10
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	; (800201c <HAL_RCC_GetPCLK1Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	08003794 	.word	0x08003794

08002020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002024:	f7ff ffdc 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	0b5b      	lsrs	r3, r3, #13
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4903      	ldr	r1, [pc, #12]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	08003794 	.word	0x08003794

08002048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e03f      	b.n	80020da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7fe fdfc 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	; 0x24
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800208a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f929 	bl	80022e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b08a      	sub	sp, #40	; 0x28
 80020e6:	af02      	add	r7, sp, #8
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d17c      	bne.n	80021fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_UART_Transmit+0x2c>
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e075      	b.n	80021fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_UART_Transmit+0x3e>
 800211c:	2302      	movs	r3, #2
 800211e:	e06e      	b.n	80021fe <HAL_UART_Transmit+0x11c>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2221      	movs	r2, #33	; 0x21
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002136:	f7ff f85f 	bl	80011f8 <HAL_GetTick>
 800213a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	88fa      	ldrh	r2, [r7, #6]
 8002140:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	88fa      	ldrh	r2, [r7, #6]
 8002146:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002150:	d108      	bne.n	8002164 <HAL_UART_Transmit+0x82>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d104      	bne.n	8002164 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	e003      	b.n	800216c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002174:	e02a      	b.n	80021cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2200      	movs	r2, #0
 800217e:	2180      	movs	r1, #128	; 0x80
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f840 	bl	8002206 <UART_WaitOnFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e036      	b.n	80021fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10b      	bne.n	80021ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	3302      	adds	r3, #2
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	e007      	b.n	80021be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	3301      	adds	r3, #1
 80021bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1cf      	bne.n	8002176 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2200      	movs	r2, #0
 80021de:	2140      	movs	r1, #64	; 0x40
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f810 	bl	8002206 <UART_WaitOnFlagUntilTimeout>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e006      	b.n	80021fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2220      	movs	r2, #32
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	e000      	b.n	80021fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021fc:	2302      	movs	r3, #2
  }
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3720      	adds	r7, #32
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b090      	sub	sp, #64	; 0x40
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	603b      	str	r3, [r7, #0]
 8002212:	4613      	mov	r3, r2
 8002214:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002216:	e050      	b.n	80022ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002218:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800221a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800221e:	d04c      	beq.n	80022ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002222:	2b00      	cmp	r3, #0
 8002224:	d007      	beq.n	8002236 <UART_WaitOnFlagUntilTimeout+0x30>
 8002226:	f7fe ffe7 	bl	80011f8 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002232:	429a      	cmp	r2, r3
 8002234:	d241      	bcs.n	80022ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	330c      	adds	r3, #12
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002240:	e853 3f00 	ldrex	r3, [r3]
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800224c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	330c      	adds	r3, #12
 8002254:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002256:	637a      	str	r2, [r7, #52]	; 0x34
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800225a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800225c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800225e:	e841 2300 	strex	r3, r2, [r1]
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1e5      	bne.n	8002236 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3314      	adds	r3, #20
 8002270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	e853 3f00 	ldrex	r3, [r3]
 8002278:	613b      	str	r3, [r7, #16]
   return(result);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	63bb      	str	r3, [r7, #56]	; 0x38
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3314      	adds	r3, #20
 8002288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800228a:	623a      	str	r2, [r7, #32]
 800228c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800228e:	69f9      	ldr	r1, [r7, #28]
 8002290:	6a3a      	ldr	r2, [r7, #32]
 8002292:	e841 2300 	strex	r3, r2, [r1]
 8002296:	61bb      	str	r3, [r7, #24]
   return(result);
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1e5      	bne.n	800226a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e00f      	b.n	80022da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4013      	ands	r3, r2
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	bf0c      	ite	eq
 80022ca:	2301      	moveq	r3, #1
 80022cc:	2300      	movne	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d09f      	beq.n	8002218 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3740      	adds	r7, #64	; 0x40
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e8:	b0c0      	sub	sp, #256	; 0x100
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002300:	68d9      	ldr	r1, [r3, #12]
 8002302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	ea40 0301 	orr.w	r3, r0, r1
 800230c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	431a      	orrs	r2, r3
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	431a      	orrs	r2, r3
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800233c:	f021 010c 	bic.w	r1, r1, #12
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800234a:	430b      	orrs	r3, r1
 800234c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800235a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235e:	6999      	ldr	r1, [r3, #24]
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	ea40 0301 	orr.w	r3, r0, r1
 800236a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800236c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b8f      	ldr	r3, [pc, #572]	; (80025b0 <UART_SetConfig+0x2cc>)
 8002374:	429a      	cmp	r2, r3
 8002376:	d005      	beq.n	8002384 <UART_SetConfig+0xa0>
 8002378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	4b8d      	ldr	r3, [pc, #564]	; (80025b4 <UART_SetConfig+0x2d0>)
 8002380:	429a      	cmp	r2, r3
 8002382:	d104      	bne.n	800238e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002384:	f7ff fe4c 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 8002388:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800238c:	e003      	b.n	8002396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800238e:	f7ff fe33 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8002392:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a0:	f040 810c 	bne.w	80025bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023a8:	2200      	movs	r2, #0
 80023aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80023b6:	4622      	mov	r2, r4
 80023b8:	462b      	mov	r3, r5
 80023ba:	1891      	adds	r1, r2, r2
 80023bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80023be:	415b      	adcs	r3, r3
 80023c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80023c6:	4621      	mov	r1, r4
 80023c8:	eb12 0801 	adds.w	r8, r2, r1
 80023cc:	4629      	mov	r1, r5
 80023ce:	eb43 0901 	adc.w	r9, r3, r1
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023e6:	4690      	mov	r8, r2
 80023e8:	4699      	mov	r9, r3
 80023ea:	4623      	mov	r3, r4
 80023ec:	eb18 0303 	adds.w	r3, r8, r3
 80023f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80023f4:	462b      	mov	r3, r5
 80023f6:	eb49 0303 	adc.w	r3, r9, r3
 80023fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80023fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800240a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800240e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002412:	460b      	mov	r3, r1
 8002414:	18db      	adds	r3, r3, r3
 8002416:	653b      	str	r3, [r7, #80]	; 0x50
 8002418:	4613      	mov	r3, r2
 800241a:	eb42 0303 	adc.w	r3, r2, r3
 800241e:	657b      	str	r3, [r7, #84]	; 0x54
 8002420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002428:	f7fd ff52 	bl	80002d0 <__aeabi_uldivmod>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <UART_SetConfig+0x2d4>)
 8002432:	fba3 2302 	umull	r2, r3, r3, r2
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	011c      	lsls	r4, r3, #4
 800243a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800243e:	2200      	movs	r2, #0
 8002440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002444:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800244c:	4642      	mov	r2, r8
 800244e:	464b      	mov	r3, r9
 8002450:	1891      	adds	r1, r2, r2
 8002452:	64b9      	str	r1, [r7, #72]	; 0x48
 8002454:	415b      	adcs	r3, r3
 8002456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800245c:	4641      	mov	r1, r8
 800245e:	eb12 0a01 	adds.w	sl, r2, r1
 8002462:	4649      	mov	r1, r9
 8002464:	eb43 0b01 	adc.w	fp, r3, r1
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800247c:	4692      	mov	sl, r2
 800247e:	469b      	mov	fp, r3
 8002480:	4643      	mov	r3, r8
 8002482:	eb1a 0303 	adds.w	r3, sl, r3
 8002486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800248a:	464b      	mov	r3, r9
 800248c:	eb4b 0303 	adc.w	r3, fp, r3
 8002490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80024a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80024a8:	460b      	mov	r3, r1
 80024aa:	18db      	adds	r3, r3, r3
 80024ac:	643b      	str	r3, [r7, #64]	; 0x40
 80024ae:	4613      	mov	r3, r2
 80024b0:	eb42 0303 	adc.w	r3, r2, r3
 80024b4:	647b      	str	r3, [r7, #68]	; 0x44
 80024b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80024be:	f7fd ff07 	bl	80002d0 <__aeabi_uldivmod>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4611      	mov	r1, r2
 80024c8:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <UART_SetConfig+0x2d4>)
 80024ca:	fba3 2301 	umull	r2, r3, r3, r1
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2264      	movs	r2, #100	; 0x64
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	1acb      	subs	r3, r1, r3
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80024de:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <UART_SetConfig+0x2d4>)
 80024e0:	fba3 2302 	umull	r2, r3, r3, r2
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80024ec:	441c      	add	r4, r3
 80024ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024f2:	2200      	movs	r2, #0
 80024f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80024fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002500:	4642      	mov	r2, r8
 8002502:	464b      	mov	r3, r9
 8002504:	1891      	adds	r1, r2, r2
 8002506:	63b9      	str	r1, [r7, #56]	; 0x38
 8002508:	415b      	adcs	r3, r3
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002510:	4641      	mov	r1, r8
 8002512:	1851      	adds	r1, r2, r1
 8002514:	6339      	str	r1, [r7, #48]	; 0x30
 8002516:	4649      	mov	r1, r9
 8002518:	414b      	adcs	r3, r1
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002528:	4659      	mov	r1, fp
 800252a:	00cb      	lsls	r3, r1, #3
 800252c:	4651      	mov	r1, sl
 800252e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002532:	4651      	mov	r1, sl
 8002534:	00ca      	lsls	r2, r1, #3
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	4603      	mov	r3, r0
 800253c:	4642      	mov	r2, r8
 800253e:	189b      	adds	r3, r3, r2
 8002540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002544:	464b      	mov	r3, r9
 8002546:	460a      	mov	r2, r1
 8002548:	eb42 0303 	adc.w	r3, r2, r3
 800254c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800255c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002564:	460b      	mov	r3, r1
 8002566:	18db      	adds	r3, r3, r3
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
 800256a:	4613      	mov	r3, r2
 800256c:	eb42 0303 	adc.w	r3, r2, r3
 8002570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800257a:	f7fd fea9 	bl	80002d0 <__aeabi_uldivmod>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <UART_SetConfig+0x2d4>)
 8002584:	fba3 1302 	umull	r1, r3, r3, r2
 8002588:	095b      	lsrs	r3, r3, #5
 800258a:	2164      	movs	r1, #100	; 0x64
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	3332      	adds	r3, #50	; 0x32
 8002596:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <UART_SetConfig+0x2d4>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	095b      	lsrs	r3, r3, #5
 800259e:	f003 0207 	and.w	r2, r3, #7
 80025a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4422      	add	r2, r4
 80025aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025ac:	e105      	b.n	80027ba <UART_SetConfig+0x4d6>
 80025ae:	bf00      	nop
 80025b0:	40011000 	.word	0x40011000
 80025b4:	40011400 	.word	0x40011400
 80025b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025c0:	2200      	movs	r2, #0
 80025c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80025c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80025ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80025ce:	4642      	mov	r2, r8
 80025d0:	464b      	mov	r3, r9
 80025d2:	1891      	adds	r1, r2, r2
 80025d4:	6239      	str	r1, [r7, #32]
 80025d6:	415b      	adcs	r3, r3
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
 80025da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025de:	4641      	mov	r1, r8
 80025e0:	1854      	adds	r4, r2, r1
 80025e2:	4649      	mov	r1, r9
 80025e4:	eb43 0501 	adc.w	r5, r3, r1
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	00eb      	lsls	r3, r5, #3
 80025f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025f6:	00e2      	lsls	r2, r4, #3
 80025f8:	4614      	mov	r4, r2
 80025fa:	461d      	mov	r5, r3
 80025fc:	4643      	mov	r3, r8
 80025fe:	18e3      	adds	r3, r4, r3
 8002600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002604:	464b      	mov	r3, r9
 8002606:	eb45 0303 	adc.w	r3, r5, r3
 800260a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800261a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800262a:	4629      	mov	r1, r5
 800262c:	008b      	lsls	r3, r1, #2
 800262e:	4621      	mov	r1, r4
 8002630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002634:	4621      	mov	r1, r4
 8002636:	008a      	lsls	r2, r1, #2
 8002638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800263c:	f7fd fe48 	bl	80002d0 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4b60      	ldr	r3, [pc, #384]	; (80027c8 <UART_SetConfig+0x4e4>)
 8002646:	fba3 2302 	umull	r2, r3, r3, r2
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	011c      	lsls	r4, r3, #4
 800264e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002652:	2200      	movs	r2, #0
 8002654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800265c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002660:	4642      	mov	r2, r8
 8002662:	464b      	mov	r3, r9
 8002664:	1891      	adds	r1, r2, r2
 8002666:	61b9      	str	r1, [r7, #24]
 8002668:	415b      	adcs	r3, r3
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002670:	4641      	mov	r1, r8
 8002672:	1851      	adds	r1, r2, r1
 8002674:	6139      	str	r1, [r7, #16]
 8002676:	4649      	mov	r1, r9
 8002678:	414b      	adcs	r3, r1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002688:	4659      	mov	r1, fp
 800268a:	00cb      	lsls	r3, r1, #3
 800268c:	4651      	mov	r1, sl
 800268e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002692:	4651      	mov	r1, sl
 8002694:	00ca      	lsls	r2, r1, #3
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	4603      	mov	r3, r0
 800269c:	4642      	mov	r2, r8
 800269e:	189b      	adds	r3, r3, r2
 80026a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026a4:	464b      	mov	r3, r9
 80026a6:	460a      	mov	r2, r1
 80026a8:	eb42 0303 	adc.w	r3, r2, r3
 80026ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80026ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80026c8:	4649      	mov	r1, r9
 80026ca:	008b      	lsls	r3, r1, #2
 80026cc:	4641      	mov	r1, r8
 80026ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026d2:	4641      	mov	r1, r8
 80026d4:	008a      	lsls	r2, r1, #2
 80026d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80026da:	f7fd fdf9 	bl	80002d0 <__aeabi_uldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <UART_SetConfig+0x4e4>)
 80026e4:	fba3 1302 	umull	r1, r3, r3, r2
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	2164      	movs	r1, #100	; 0x64
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	3332      	adds	r3, #50	; 0x32
 80026f6:	4a34      	ldr	r2, [pc, #208]	; (80027c8 <UART_SetConfig+0x4e4>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002702:	441c      	add	r4, r3
 8002704:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002708:	2200      	movs	r2, #0
 800270a:	673b      	str	r3, [r7, #112]	; 0x70
 800270c:	677a      	str	r2, [r7, #116]	; 0x74
 800270e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002712:	4642      	mov	r2, r8
 8002714:	464b      	mov	r3, r9
 8002716:	1891      	adds	r1, r2, r2
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	415b      	adcs	r3, r3
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002722:	4641      	mov	r1, r8
 8002724:	1851      	adds	r1, r2, r1
 8002726:	6039      	str	r1, [r7, #0]
 8002728:	4649      	mov	r1, r9
 800272a:	414b      	adcs	r3, r1
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	f04f 0300 	mov.w	r3, #0
 8002736:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800273a:	4659      	mov	r1, fp
 800273c:	00cb      	lsls	r3, r1, #3
 800273e:	4651      	mov	r1, sl
 8002740:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002744:	4651      	mov	r1, sl
 8002746:	00ca      	lsls	r2, r1, #3
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	4603      	mov	r3, r0
 800274e:	4642      	mov	r2, r8
 8002750:	189b      	adds	r3, r3, r2
 8002752:	66bb      	str	r3, [r7, #104]	; 0x68
 8002754:	464b      	mov	r3, r9
 8002756:	460a      	mov	r2, r1
 8002758:	eb42 0303 	adc.w	r3, r2, r3
 800275c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	663b      	str	r3, [r7, #96]	; 0x60
 8002768:	667a      	str	r2, [r7, #100]	; 0x64
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002776:	4649      	mov	r1, r9
 8002778:	008b      	lsls	r3, r1, #2
 800277a:	4641      	mov	r1, r8
 800277c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002780:	4641      	mov	r1, r8
 8002782:	008a      	lsls	r2, r1, #2
 8002784:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002788:	f7fd fda2 	bl	80002d0 <__aeabi_uldivmod>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <UART_SetConfig+0x4e4>)
 8002792:	fba3 1302 	umull	r1, r3, r3, r2
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2164      	movs	r1, #100	; 0x64
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	3332      	adds	r3, #50	; 0x32
 80027a4:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <UART_SetConfig+0x4e4>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	095b      	lsrs	r3, r3, #5
 80027ac:	f003 020f 	and.w	r2, r3, #15
 80027b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4422      	add	r2, r4
 80027b8:	609a      	str	r2, [r3, #8]
}
 80027ba:	bf00      	nop
 80027bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80027c0:	46bd      	mov	sp, r7
 80027c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c6:	bf00      	nop
 80027c8:	51eb851f 	.word	0x51eb851f

080027cc <__errno>:
 80027cc:	4b01      	ldr	r3, [pc, #4]	; (80027d4 <__errno+0x8>)
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	2000000c 	.word	0x2000000c

080027d8 <__libc_init_array>:
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	4d0d      	ldr	r5, [pc, #52]	; (8002810 <__libc_init_array+0x38>)
 80027dc:	4c0d      	ldr	r4, [pc, #52]	; (8002814 <__libc_init_array+0x3c>)
 80027de:	1b64      	subs	r4, r4, r5
 80027e0:	10a4      	asrs	r4, r4, #2
 80027e2:	2600      	movs	r6, #0
 80027e4:	42a6      	cmp	r6, r4
 80027e6:	d109      	bne.n	80027fc <__libc_init_array+0x24>
 80027e8:	4d0b      	ldr	r5, [pc, #44]	; (8002818 <__libc_init_array+0x40>)
 80027ea:	4c0c      	ldr	r4, [pc, #48]	; (800281c <__libc_init_array+0x44>)
 80027ec:	f000 ffae 	bl	800374c <_init>
 80027f0:	1b64      	subs	r4, r4, r5
 80027f2:	10a4      	asrs	r4, r4, #2
 80027f4:	2600      	movs	r6, #0
 80027f6:	42a6      	cmp	r6, r4
 80027f8:	d105      	bne.n	8002806 <__libc_init_array+0x2e>
 80027fa:	bd70      	pop	{r4, r5, r6, pc}
 80027fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002800:	4798      	blx	r3
 8002802:	3601      	adds	r6, #1
 8002804:	e7ee      	b.n	80027e4 <__libc_init_array+0xc>
 8002806:	f855 3b04 	ldr.w	r3, [r5], #4
 800280a:	4798      	blx	r3
 800280c:	3601      	adds	r6, #1
 800280e:	e7f2      	b.n	80027f6 <__libc_init_array+0x1e>
 8002810:	0800383c 	.word	0x0800383c
 8002814:	0800383c 	.word	0x0800383c
 8002818:	0800383c 	.word	0x0800383c
 800281c:	08003840 	.word	0x08003840

08002820 <memset>:
 8002820:	4402      	add	r2, r0
 8002822:	4603      	mov	r3, r0
 8002824:	4293      	cmp	r3, r2
 8002826:	d100      	bne.n	800282a <memset+0xa>
 8002828:	4770      	bx	lr
 800282a:	f803 1b01 	strb.w	r1, [r3], #1
 800282e:	e7f9      	b.n	8002824 <memset+0x4>

08002830 <iprintf>:
 8002830:	b40f      	push	{r0, r1, r2, r3}
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <iprintf+0x2c>)
 8002834:	b513      	push	{r0, r1, r4, lr}
 8002836:	681c      	ldr	r4, [r3, #0]
 8002838:	b124      	cbz	r4, 8002844 <iprintf+0x14>
 800283a:	69a3      	ldr	r3, [r4, #24]
 800283c:	b913      	cbnz	r3, 8002844 <iprintf+0x14>
 800283e:	4620      	mov	r0, r4
 8002840:	f000 f9e8 	bl	8002c14 <__sinit>
 8002844:	ab05      	add	r3, sp, #20
 8002846:	9a04      	ldr	r2, [sp, #16]
 8002848:	68a1      	ldr	r1, [r4, #8]
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	4620      	mov	r0, r4
 800284e:	f000 fbf1 	bl	8003034 <_vfiprintf_r>
 8002852:	b002      	add	sp, #8
 8002854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002858:	b004      	add	sp, #16
 800285a:	4770      	bx	lr
 800285c:	2000000c 	.word	0x2000000c

08002860 <__swbuf_r>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	460e      	mov	r6, r1
 8002864:	4614      	mov	r4, r2
 8002866:	4605      	mov	r5, r0
 8002868:	b118      	cbz	r0, 8002872 <__swbuf_r+0x12>
 800286a:	6983      	ldr	r3, [r0, #24]
 800286c:	b90b      	cbnz	r3, 8002872 <__swbuf_r+0x12>
 800286e:	f000 f9d1 	bl	8002c14 <__sinit>
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <__swbuf_r+0x98>)
 8002874:	429c      	cmp	r4, r3
 8002876:	d12b      	bne.n	80028d0 <__swbuf_r+0x70>
 8002878:	686c      	ldr	r4, [r5, #4]
 800287a:	69a3      	ldr	r3, [r4, #24]
 800287c:	60a3      	str	r3, [r4, #8]
 800287e:	89a3      	ldrh	r3, [r4, #12]
 8002880:	071a      	lsls	r2, r3, #28
 8002882:	d52f      	bpl.n	80028e4 <__swbuf_r+0x84>
 8002884:	6923      	ldr	r3, [r4, #16]
 8002886:	b36b      	cbz	r3, 80028e4 <__swbuf_r+0x84>
 8002888:	6923      	ldr	r3, [r4, #16]
 800288a:	6820      	ldr	r0, [r4, #0]
 800288c:	1ac0      	subs	r0, r0, r3
 800288e:	6963      	ldr	r3, [r4, #20]
 8002890:	b2f6      	uxtb	r6, r6
 8002892:	4283      	cmp	r3, r0
 8002894:	4637      	mov	r7, r6
 8002896:	dc04      	bgt.n	80028a2 <__swbuf_r+0x42>
 8002898:	4621      	mov	r1, r4
 800289a:	4628      	mov	r0, r5
 800289c:	f000 f926 	bl	8002aec <_fflush_r>
 80028a0:	bb30      	cbnz	r0, 80028f0 <__swbuf_r+0x90>
 80028a2:	68a3      	ldr	r3, [r4, #8]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	60a3      	str	r3, [r4, #8]
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	6022      	str	r2, [r4, #0]
 80028ae:	701e      	strb	r6, [r3, #0]
 80028b0:	6963      	ldr	r3, [r4, #20]
 80028b2:	3001      	adds	r0, #1
 80028b4:	4283      	cmp	r3, r0
 80028b6:	d004      	beq.n	80028c2 <__swbuf_r+0x62>
 80028b8:	89a3      	ldrh	r3, [r4, #12]
 80028ba:	07db      	lsls	r3, r3, #31
 80028bc:	d506      	bpl.n	80028cc <__swbuf_r+0x6c>
 80028be:	2e0a      	cmp	r6, #10
 80028c0:	d104      	bne.n	80028cc <__swbuf_r+0x6c>
 80028c2:	4621      	mov	r1, r4
 80028c4:	4628      	mov	r0, r5
 80028c6:	f000 f911 	bl	8002aec <_fflush_r>
 80028ca:	b988      	cbnz	r0, 80028f0 <__swbuf_r+0x90>
 80028cc:	4638      	mov	r0, r7
 80028ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <__swbuf_r+0x9c>)
 80028d2:	429c      	cmp	r4, r3
 80028d4:	d101      	bne.n	80028da <__swbuf_r+0x7a>
 80028d6:	68ac      	ldr	r4, [r5, #8]
 80028d8:	e7cf      	b.n	800287a <__swbuf_r+0x1a>
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <__swbuf_r+0xa0>)
 80028dc:	429c      	cmp	r4, r3
 80028de:	bf08      	it	eq
 80028e0:	68ec      	ldreq	r4, [r5, #12]
 80028e2:	e7ca      	b.n	800287a <__swbuf_r+0x1a>
 80028e4:	4621      	mov	r1, r4
 80028e6:	4628      	mov	r0, r5
 80028e8:	f000 f80c 	bl	8002904 <__swsetup_r>
 80028ec:	2800      	cmp	r0, #0
 80028ee:	d0cb      	beq.n	8002888 <__swbuf_r+0x28>
 80028f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80028f4:	e7ea      	b.n	80028cc <__swbuf_r+0x6c>
 80028f6:	bf00      	nop
 80028f8:	080037c0 	.word	0x080037c0
 80028fc:	080037e0 	.word	0x080037e0
 8002900:	080037a0 	.word	0x080037a0

08002904 <__swsetup_r>:
 8002904:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <__swsetup_r+0xcc>)
 8002906:	b570      	push	{r4, r5, r6, lr}
 8002908:	681d      	ldr	r5, [r3, #0]
 800290a:	4606      	mov	r6, r0
 800290c:	460c      	mov	r4, r1
 800290e:	b125      	cbz	r5, 800291a <__swsetup_r+0x16>
 8002910:	69ab      	ldr	r3, [r5, #24]
 8002912:	b913      	cbnz	r3, 800291a <__swsetup_r+0x16>
 8002914:	4628      	mov	r0, r5
 8002916:	f000 f97d 	bl	8002c14 <__sinit>
 800291a:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <__swsetup_r+0xd0>)
 800291c:	429c      	cmp	r4, r3
 800291e:	d10f      	bne.n	8002940 <__swsetup_r+0x3c>
 8002920:	686c      	ldr	r4, [r5, #4]
 8002922:	89a3      	ldrh	r3, [r4, #12]
 8002924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002928:	0719      	lsls	r1, r3, #28
 800292a:	d42c      	bmi.n	8002986 <__swsetup_r+0x82>
 800292c:	06dd      	lsls	r5, r3, #27
 800292e:	d411      	bmi.n	8002954 <__swsetup_r+0x50>
 8002930:	2309      	movs	r3, #9
 8002932:	6033      	str	r3, [r6, #0]
 8002934:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002938:	81a3      	strh	r3, [r4, #12]
 800293a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800293e:	e03e      	b.n	80029be <__swsetup_r+0xba>
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <__swsetup_r+0xd4>)
 8002942:	429c      	cmp	r4, r3
 8002944:	d101      	bne.n	800294a <__swsetup_r+0x46>
 8002946:	68ac      	ldr	r4, [r5, #8]
 8002948:	e7eb      	b.n	8002922 <__swsetup_r+0x1e>
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <__swsetup_r+0xd8>)
 800294c:	429c      	cmp	r4, r3
 800294e:	bf08      	it	eq
 8002950:	68ec      	ldreq	r4, [r5, #12]
 8002952:	e7e6      	b.n	8002922 <__swsetup_r+0x1e>
 8002954:	0758      	lsls	r0, r3, #29
 8002956:	d512      	bpl.n	800297e <__swsetup_r+0x7a>
 8002958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800295a:	b141      	cbz	r1, 800296e <__swsetup_r+0x6a>
 800295c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002960:	4299      	cmp	r1, r3
 8002962:	d002      	beq.n	800296a <__swsetup_r+0x66>
 8002964:	4630      	mov	r0, r6
 8002966:	f000 fa5b 	bl	8002e20 <_free_r>
 800296a:	2300      	movs	r3, #0
 800296c:	6363      	str	r3, [r4, #52]	; 0x34
 800296e:	89a3      	ldrh	r3, [r4, #12]
 8002970:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002974:	81a3      	strh	r3, [r4, #12]
 8002976:	2300      	movs	r3, #0
 8002978:	6063      	str	r3, [r4, #4]
 800297a:	6923      	ldr	r3, [r4, #16]
 800297c:	6023      	str	r3, [r4, #0]
 800297e:	89a3      	ldrh	r3, [r4, #12]
 8002980:	f043 0308 	orr.w	r3, r3, #8
 8002984:	81a3      	strh	r3, [r4, #12]
 8002986:	6923      	ldr	r3, [r4, #16]
 8002988:	b94b      	cbnz	r3, 800299e <__swsetup_r+0x9a>
 800298a:	89a3      	ldrh	r3, [r4, #12]
 800298c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002994:	d003      	beq.n	800299e <__swsetup_r+0x9a>
 8002996:	4621      	mov	r1, r4
 8002998:	4630      	mov	r0, r6
 800299a:	f000 fa01 	bl	8002da0 <__smakebuf_r>
 800299e:	89a0      	ldrh	r0, [r4, #12]
 80029a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029a4:	f010 0301 	ands.w	r3, r0, #1
 80029a8:	d00a      	beq.n	80029c0 <__swsetup_r+0xbc>
 80029aa:	2300      	movs	r3, #0
 80029ac:	60a3      	str	r3, [r4, #8]
 80029ae:	6963      	ldr	r3, [r4, #20]
 80029b0:	425b      	negs	r3, r3
 80029b2:	61a3      	str	r3, [r4, #24]
 80029b4:	6923      	ldr	r3, [r4, #16]
 80029b6:	b943      	cbnz	r3, 80029ca <__swsetup_r+0xc6>
 80029b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80029bc:	d1ba      	bne.n	8002934 <__swsetup_r+0x30>
 80029be:	bd70      	pop	{r4, r5, r6, pc}
 80029c0:	0781      	lsls	r1, r0, #30
 80029c2:	bf58      	it	pl
 80029c4:	6963      	ldrpl	r3, [r4, #20]
 80029c6:	60a3      	str	r3, [r4, #8]
 80029c8:	e7f4      	b.n	80029b4 <__swsetup_r+0xb0>
 80029ca:	2000      	movs	r0, #0
 80029cc:	e7f7      	b.n	80029be <__swsetup_r+0xba>
 80029ce:	bf00      	nop
 80029d0:	2000000c 	.word	0x2000000c
 80029d4:	080037c0 	.word	0x080037c0
 80029d8:	080037e0 	.word	0x080037e0
 80029dc:	080037a0 	.word	0x080037a0

080029e0 <__sflush_r>:
 80029e0:	898a      	ldrh	r2, [r1, #12]
 80029e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e6:	4605      	mov	r5, r0
 80029e8:	0710      	lsls	r0, r2, #28
 80029ea:	460c      	mov	r4, r1
 80029ec:	d458      	bmi.n	8002aa0 <__sflush_r+0xc0>
 80029ee:	684b      	ldr	r3, [r1, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	dc05      	bgt.n	8002a00 <__sflush_r+0x20>
 80029f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	dc02      	bgt.n	8002a00 <__sflush_r+0x20>
 80029fa:	2000      	movs	r0, #0
 80029fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a02:	2e00      	cmp	r6, #0
 8002a04:	d0f9      	beq.n	80029fa <__sflush_r+0x1a>
 8002a06:	2300      	movs	r3, #0
 8002a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a0c:	682f      	ldr	r7, [r5, #0]
 8002a0e:	602b      	str	r3, [r5, #0]
 8002a10:	d032      	beq.n	8002a78 <__sflush_r+0x98>
 8002a12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a14:	89a3      	ldrh	r3, [r4, #12]
 8002a16:	075a      	lsls	r2, r3, #29
 8002a18:	d505      	bpl.n	8002a26 <__sflush_r+0x46>
 8002a1a:	6863      	ldr	r3, [r4, #4]
 8002a1c:	1ac0      	subs	r0, r0, r3
 8002a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a20:	b10b      	cbz	r3, 8002a26 <__sflush_r+0x46>
 8002a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a24:	1ac0      	subs	r0, r0, r3
 8002a26:	2300      	movs	r3, #0
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a2c:	6a21      	ldr	r1, [r4, #32]
 8002a2e:	4628      	mov	r0, r5
 8002a30:	47b0      	blx	r6
 8002a32:	1c43      	adds	r3, r0, #1
 8002a34:	89a3      	ldrh	r3, [r4, #12]
 8002a36:	d106      	bne.n	8002a46 <__sflush_r+0x66>
 8002a38:	6829      	ldr	r1, [r5, #0]
 8002a3a:	291d      	cmp	r1, #29
 8002a3c:	d82c      	bhi.n	8002a98 <__sflush_r+0xb8>
 8002a3e:	4a2a      	ldr	r2, [pc, #168]	; (8002ae8 <__sflush_r+0x108>)
 8002a40:	40ca      	lsrs	r2, r1
 8002a42:	07d6      	lsls	r6, r2, #31
 8002a44:	d528      	bpl.n	8002a98 <__sflush_r+0xb8>
 8002a46:	2200      	movs	r2, #0
 8002a48:	6062      	str	r2, [r4, #4]
 8002a4a:	04d9      	lsls	r1, r3, #19
 8002a4c:	6922      	ldr	r2, [r4, #16]
 8002a4e:	6022      	str	r2, [r4, #0]
 8002a50:	d504      	bpl.n	8002a5c <__sflush_r+0x7c>
 8002a52:	1c42      	adds	r2, r0, #1
 8002a54:	d101      	bne.n	8002a5a <__sflush_r+0x7a>
 8002a56:	682b      	ldr	r3, [r5, #0]
 8002a58:	b903      	cbnz	r3, 8002a5c <__sflush_r+0x7c>
 8002a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8002a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a5e:	602f      	str	r7, [r5, #0]
 8002a60:	2900      	cmp	r1, #0
 8002a62:	d0ca      	beq.n	80029fa <__sflush_r+0x1a>
 8002a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a68:	4299      	cmp	r1, r3
 8002a6a:	d002      	beq.n	8002a72 <__sflush_r+0x92>
 8002a6c:	4628      	mov	r0, r5
 8002a6e:	f000 f9d7 	bl	8002e20 <_free_r>
 8002a72:	2000      	movs	r0, #0
 8002a74:	6360      	str	r0, [r4, #52]	; 0x34
 8002a76:	e7c1      	b.n	80029fc <__sflush_r+0x1c>
 8002a78:	6a21      	ldr	r1, [r4, #32]
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	47b0      	blx	r6
 8002a80:	1c41      	adds	r1, r0, #1
 8002a82:	d1c7      	bne.n	8002a14 <__sflush_r+0x34>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0c4      	beq.n	8002a14 <__sflush_r+0x34>
 8002a8a:	2b1d      	cmp	r3, #29
 8002a8c:	d001      	beq.n	8002a92 <__sflush_r+0xb2>
 8002a8e:	2b16      	cmp	r3, #22
 8002a90:	d101      	bne.n	8002a96 <__sflush_r+0xb6>
 8002a92:	602f      	str	r7, [r5, #0]
 8002a94:	e7b1      	b.n	80029fa <__sflush_r+0x1a>
 8002a96:	89a3      	ldrh	r3, [r4, #12]
 8002a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9c:	81a3      	strh	r3, [r4, #12]
 8002a9e:	e7ad      	b.n	80029fc <__sflush_r+0x1c>
 8002aa0:	690f      	ldr	r7, [r1, #16]
 8002aa2:	2f00      	cmp	r7, #0
 8002aa4:	d0a9      	beq.n	80029fa <__sflush_r+0x1a>
 8002aa6:	0793      	lsls	r3, r2, #30
 8002aa8:	680e      	ldr	r6, [r1, #0]
 8002aaa:	bf08      	it	eq
 8002aac:	694b      	ldreq	r3, [r1, #20]
 8002aae:	600f      	str	r7, [r1, #0]
 8002ab0:	bf18      	it	ne
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	eba6 0807 	sub.w	r8, r6, r7
 8002ab8:	608b      	str	r3, [r1, #8]
 8002aba:	f1b8 0f00 	cmp.w	r8, #0
 8002abe:	dd9c      	ble.n	80029fa <__sflush_r+0x1a>
 8002ac0:	6a21      	ldr	r1, [r4, #32]
 8002ac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ac4:	4643      	mov	r3, r8
 8002ac6:	463a      	mov	r2, r7
 8002ac8:	4628      	mov	r0, r5
 8002aca:	47b0      	blx	r6
 8002acc:	2800      	cmp	r0, #0
 8002ace:	dc06      	bgt.n	8002ade <__sflush_r+0xfe>
 8002ad0:	89a3      	ldrh	r3, [r4, #12]
 8002ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ad6:	81a3      	strh	r3, [r4, #12]
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002adc:	e78e      	b.n	80029fc <__sflush_r+0x1c>
 8002ade:	4407      	add	r7, r0
 8002ae0:	eba8 0800 	sub.w	r8, r8, r0
 8002ae4:	e7e9      	b.n	8002aba <__sflush_r+0xda>
 8002ae6:	bf00      	nop
 8002ae8:	20400001 	.word	0x20400001

08002aec <_fflush_r>:
 8002aec:	b538      	push	{r3, r4, r5, lr}
 8002aee:	690b      	ldr	r3, [r1, #16]
 8002af0:	4605      	mov	r5, r0
 8002af2:	460c      	mov	r4, r1
 8002af4:	b913      	cbnz	r3, 8002afc <_fflush_r+0x10>
 8002af6:	2500      	movs	r5, #0
 8002af8:	4628      	mov	r0, r5
 8002afa:	bd38      	pop	{r3, r4, r5, pc}
 8002afc:	b118      	cbz	r0, 8002b06 <_fflush_r+0x1a>
 8002afe:	6983      	ldr	r3, [r0, #24]
 8002b00:	b90b      	cbnz	r3, 8002b06 <_fflush_r+0x1a>
 8002b02:	f000 f887 	bl	8002c14 <__sinit>
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <_fflush_r+0x6c>)
 8002b08:	429c      	cmp	r4, r3
 8002b0a:	d11b      	bne.n	8002b44 <_fflush_r+0x58>
 8002b0c:	686c      	ldr	r4, [r5, #4]
 8002b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0ef      	beq.n	8002af6 <_fflush_r+0xa>
 8002b16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b18:	07d0      	lsls	r0, r2, #31
 8002b1a:	d404      	bmi.n	8002b26 <_fflush_r+0x3a>
 8002b1c:	0599      	lsls	r1, r3, #22
 8002b1e:	d402      	bmi.n	8002b26 <_fflush_r+0x3a>
 8002b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b22:	f000 f915 	bl	8002d50 <__retarget_lock_acquire_recursive>
 8002b26:	4628      	mov	r0, r5
 8002b28:	4621      	mov	r1, r4
 8002b2a:	f7ff ff59 	bl	80029e0 <__sflush_r>
 8002b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b30:	07da      	lsls	r2, r3, #31
 8002b32:	4605      	mov	r5, r0
 8002b34:	d4e0      	bmi.n	8002af8 <_fflush_r+0xc>
 8002b36:	89a3      	ldrh	r3, [r4, #12]
 8002b38:	059b      	lsls	r3, r3, #22
 8002b3a:	d4dd      	bmi.n	8002af8 <_fflush_r+0xc>
 8002b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b3e:	f000 f908 	bl	8002d52 <__retarget_lock_release_recursive>
 8002b42:	e7d9      	b.n	8002af8 <_fflush_r+0xc>
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <_fflush_r+0x70>)
 8002b46:	429c      	cmp	r4, r3
 8002b48:	d101      	bne.n	8002b4e <_fflush_r+0x62>
 8002b4a:	68ac      	ldr	r4, [r5, #8]
 8002b4c:	e7df      	b.n	8002b0e <_fflush_r+0x22>
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <_fflush_r+0x74>)
 8002b50:	429c      	cmp	r4, r3
 8002b52:	bf08      	it	eq
 8002b54:	68ec      	ldreq	r4, [r5, #12]
 8002b56:	e7da      	b.n	8002b0e <_fflush_r+0x22>
 8002b58:	080037c0 	.word	0x080037c0
 8002b5c:	080037e0 	.word	0x080037e0
 8002b60:	080037a0 	.word	0x080037a0

08002b64 <std>:
 8002b64:	2300      	movs	r3, #0
 8002b66:	b510      	push	{r4, lr}
 8002b68:	4604      	mov	r4, r0
 8002b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8002b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b72:	6083      	str	r3, [r0, #8]
 8002b74:	8181      	strh	r1, [r0, #12]
 8002b76:	6643      	str	r3, [r0, #100]	; 0x64
 8002b78:	81c2      	strh	r2, [r0, #14]
 8002b7a:	6183      	str	r3, [r0, #24]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	2208      	movs	r2, #8
 8002b80:	305c      	adds	r0, #92	; 0x5c
 8002b82:	f7ff fe4d 	bl	8002820 <memset>
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <std+0x38>)
 8002b88:	6263      	str	r3, [r4, #36]	; 0x24
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <std+0x3c>)
 8002b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <std+0x40>)
 8002b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <std+0x44>)
 8002b94:	6224      	str	r4, [r4, #32]
 8002b96:	6323      	str	r3, [r4, #48]	; 0x30
 8002b98:	bd10      	pop	{r4, pc}
 8002b9a:	bf00      	nop
 8002b9c:	080035dd 	.word	0x080035dd
 8002ba0:	080035ff 	.word	0x080035ff
 8002ba4:	08003637 	.word	0x08003637
 8002ba8:	0800365b 	.word	0x0800365b

08002bac <_cleanup_r>:
 8002bac:	4901      	ldr	r1, [pc, #4]	; (8002bb4 <_cleanup_r+0x8>)
 8002bae:	f000 b8af 	b.w	8002d10 <_fwalk_reent>
 8002bb2:	bf00      	nop
 8002bb4:	08002aed 	.word	0x08002aed

08002bb8 <__sfmoreglue>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	2268      	movs	r2, #104	; 0x68
 8002bbc:	1e4d      	subs	r5, r1, #1
 8002bbe:	4355      	muls	r5, r2
 8002bc0:	460e      	mov	r6, r1
 8002bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002bc6:	f000 f997 	bl	8002ef8 <_malloc_r>
 8002bca:	4604      	mov	r4, r0
 8002bcc:	b140      	cbz	r0, 8002be0 <__sfmoreglue+0x28>
 8002bce:	2100      	movs	r1, #0
 8002bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8002bd4:	300c      	adds	r0, #12
 8002bd6:	60a0      	str	r0, [r4, #8]
 8002bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002bdc:	f7ff fe20 	bl	8002820 <memset>
 8002be0:	4620      	mov	r0, r4
 8002be2:	bd70      	pop	{r4, r5, r6, pc}

08002be4 <__sfp_lock_acquire>:
 8002be4:	4801      	ldr	r0, [pc, #4]	; (8002bec <__sfp_lock_acquire+0x8>)
 8002be6:	f000 b8b3 	b.w	8002d50 <__retarget_lock_acquire_recursive>
 8002bea:	bf00      	nop
 8002bec:	20000235 	.word	0x20000235

08002bf0 <__sfp_lock_release>:
 8002bf0:	4801      	ldr	r0, [pc, #4]	; (8002bf8 <__sfp_lock_release+0x8>)
 8002bf2:	f000 b8ae 	b.w	8002d52 <__retarget_lock_release_recursive>
 8002bf6:	bf00      	nop
 8002bf8:	20000235 	.word	0x20000235

08002bfc <__sinit_lock_acquire>:
 8002bfc:	4801      	ldr	r0, [pc, #4]	; (8002c04 <__sinit_lock_acquire+0x8>)
 8002bfe:	f000 b8a7 	b.w	8002d50 <__retarget_lock_acquire_recursive>
 8002c02:	bf00      	nop
 8002c04:	20000236 	.word	0x20000236

08002c08 <__sinit_lock_release>:
 8002c08:	4801      	ldr	r0, [pc, #4]	; (8002c10 <__sinit_lock_release+0x8>)
 8002c0a:	f000 b8a2 	b.w	8002d52 <__retarget_lock_release_recursive>
 8002c0e:	bf00      	nop
 8002c10:	20000236 	.word	0x20000236

08002c14 <__sinit>:
 8002c14:	b510      	push	{r4, lr}
 8002c16:	4604      	mov	r4, r0
 8002c18:	f7ff fff0 	bl	8002bfc <__sinit_lock_acquire>
 8002c1c:	69a3      	ldr	r3, [r4, #24]
 8002c1e:	b11b      	cbz	r3, 8002c28 <__sinit+0x14>
 8002c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c24:	f7ff bff0 	b.w	8002c08 <__sinit_lock_release>
 8002c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <__sinit+0x68>)
 8002c30:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <__sinit+0x6c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8002c36:	42a3      	cmp	r3, r4
 8002c38:	bf04      	itt	eq
 8002c3a:	2301      	moveq	r3, #1
 8002c3c:	61a3      	streq	r3, [r4, #24]
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f000 f820 	bl	8002c84 <__sfp>
 8002c44:	6060      	str	r0, [r4, #4]
 8002c46:	4620      	mov	r0, r4
 8002c48:	f000 f81c 	bl	8002c84 <__sfp>
 8002c4c:	60a0      	str	r0, [r4, #8]
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f000 f818 	bl	8002c84 <__sfp>
 8002c54:	2200      	movs	r2, #0
 8002c56:	60e0      	str	r0, [r4, #12]
 8002c58:	2104      	movs	r1, #4
 8002c5a:	6860      	ldr	r0, [r4, #4]
 8002c5c:	f7ff ff82 	bl	8002b64 <std>
 8002c60:	68a0      	ldr	r0, [r4, #8]
 8002c62:	2201      	movs	r2, #1
 8002c64:	2109      	movs	r1, #9
 8002c66:	f7ff ff7d 	bl	8002b64 <std>
 8002c6a:	68e0      	ldr	r0, [r4, #12]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	2112      	movs	r1, #18
 8002c70:	f7ff ff78 	bl	8002b64 <std>
 8002c74:	2301      	movs	r3, #1
 8002c76:	61a3      	str	r3, [r4, #24]
 8002c78:	e7d2      	b.n	8002c20 <__sinit+0xc>
 8002c7a:	bf00      	nop
 8002c7c:	0800379c 	.word	0x0800379c
 8002c80:	08002bad 	.word	0x08002bad

08002c84 <__sfp>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	4607      	mov	r7, r0
 8002c88:	f7ff ffac 	bl	8002be4 <__sfp_lock_acquire>
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <__sfp+0x84>)
 8002c8e:	681e      	ldr	r6, [r3, #0]
 8002c90:	69b3      	ldr	r3, [r6, #24]
 8002c92:	b913      	cbnz	r3, 8002c9a <__sfp+0x16>
 8002c94:	4630      	mov	r0, r6
 8002c96:	f7ff ffbd 	bl	8002c14 <__sinit>
 8002c9a:	3648      	adds	r6, #72	; 0x48
 8002c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	d503      	bpl.n	8002cac <__sfp+0x28>
 8002ca4:	6833      	ldr	r3, [r6, #0]
 8002ca6:	b30b      	cbz	r3, 8002cec <__sfp+0x68>
 8002ca8:	6836      	ldr	r6, [r6, #0]
 8002caa:	e7f7      	b.n	8002c9c <__sfp+0x18>
 8002cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002cb0:	b9d5      	cbnz	r5, 8002ce8 <__sfp+0x64>
 8002cb2:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <__sfp+0x88>)
 8002cb4:	60e3      	str	r3, [r4, #12]
 8002cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002cba:	6665      	str	r5, [r4, #100]	; 0x64
 8002cbc:	f000 f847 	bl	8002d4e <__retarget_lock_init_recursive>
 8002cc0:	f7ff ff96 	bl	8002bf0 <__sfp_lock_release>
 8002cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002ccc:	6025      	str	r5, [r4, #0]
 8002cce:	61a5      	str	r5, [r4, #24]
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002cd8:	f7ff fda2 	bl	8002820 <memset>
 8002cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ce8:	3468      	adds	r4, #104	; 0x68
 8002cea:	e7d9      	b.n	8002ca0 <__sfp+0x1c>
 8002cec:	2104      	movs	r1, #4
 8002cee:	4638      	mov	r0, r7
 8002cf0:	f7ff ff62 	bl	8002bb8 <__sfmoreglue>
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	6030      	str	r0, [r6, #0]
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	d1d5      	bne.n	8002ca8 <__sfp+0x24>
 8002cfc:	f7ff ff78 	bl	8002bf0 <__sfp_lock_release>
 8002d00:	230c      	movs	r3, #12
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	e7ee      	b.n	8002ce4 <__sfp+0x60>
 8002d06:	bf00      	nop
 8002d08:	0800379c 	.word	0x0800379c
 8002d0c:	ffff0001 	.word	0xffff0001

08002d10 <_fwalk_reent>:
 8002d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d14:	4606      	mov	r6, r0
 8002d16:	4688      	mov	r8, r1
 8002d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d1c:	2700      	movs	r7, #0
 8002d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d22:	f1b9 0901 	subs.w	r9, r9, #1
 8002d26:	d505      	bpl.n	8002d34 <_fwalk_reent+0x24>
 8002d28:	6824      	ldr	r4, [r4, #0]
 8002d2a:	2c00      	cmp	r4, #0
 8002d2c:	d1f7      	bne.n	8002d1e <_fwalk_reent+0xe>
 8002d2e:	4638      	mov	r0, r7
 8002d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d34:	89ab      	ldrh	r3, [r5, #12]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d907      	bls.n	8002d4a <_fwalk_reent+0x3a>
 8002d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	d003      	beq.n	8002d4a <_fwalk_reent+0x3a>
 8002d42:	4629      	mov	r1, r5
 8002d44:	4630      	mov	r0, r6
 8002d46:	47c0      	blx	r8
 8002d48:	4307      	orrs	r7, r0
 8002d4a:	3568      	adds	r5, #104	; 0x68
 8002d4c:	e7e9      	b.n	8002d22 <_fwalk_reent+0x12>

08002d4e <__retarget_lock_init_recursive>:
 8002d4e:	4770      	bx	lr

08002d50 <__retarget_lock_acquire_recursive>:
 8002d50:	4770      	bx	lr

08002d52 <__retarget_lock_release_recursive>:
 8002d52:	4770      	bx	lr

08002d54 <__swhatbuf_r>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	460e      	mov	r6, r1
 8002d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d5c:	2900      	cmp	r1, #0
 8002d5e:	b096      	sub	sp, #88	; 0x58
 8002d60:	4614      	mov	r4, r2
 8002d62:	461d      	mov	r5, r3
 8002d64:	da08      	bge.n	8002d78 <__swhatbuf_r+0x24>
 8002d66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	602a      	str	r2, [r5, #0]
 8002d6e:	061a      	lsls	r2, r3, #24
 8002d70:	d410      	bmi.n	8002d94 <__swhatbuf_r+0x40>
 8002d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d76:	e00e      	b.n	8002d96 <__swhatbuf_r+0x42>
 8002d78:	466a      	mov	r2, sp
 8002d7a:	f000 fc95 	bl	80036a8 <_fstat_r>
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	dbf1      	blt.n	8002d66 <__swhatbuf_r+0x12>
 8002d82:	9a01      	ldr	r2, [sp, #4]
 8002d84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d8c:	425a      	negs	r2, r3
 8002d8e:	415a      	adcs	r2, r3
 8002d90:	602a      	str	r2, [r5, #0]
 8002d92:	e7ee      	b.n	8002d72 <__swhatbuf_r+0x1e>
 8002d94:	2340      	movs	r3, #64	; 0x40
 8002d96:	2000      	movs	r0, #0
 8002d98:	6023      	str	r3, [r4, #0]
 8002d9a:	b016      	add	sp, #88	; 0x58
 8002d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002da0 <__smakebuf_r>:
 8002da0:	898b      	ldrh	r3, [r1, #12]
 8002da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002da4:	079d      	lsls	r5, r3, #30
 8002da6:	4606      	mov	r6, r0
 8002da8:	460c      	mov	r4, r1
 8002daa:	d507      	bpl.n	8002dbc <__smakebuf_r+0x1c>
 8002dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	6123      	str	r3, [r4, #16]
 8002db4:	2301      	movs	r3, #1
 8002db6:	6163      	str	r3, [r4, #20]
 8002db8:	b002      	add	sp, #8
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	ab01      	add	r3, sp, #4
 8002dbe:	466a      	mov	r2, sp
 8002dc0:	f7ff ffc8 	bl	8002d54 <__swhatbuf_r>
 8002dc4:	9900      	ldr	r1, [sp, #0]
 8002dc6:	4605      	mov	r5, r0
 8002dc8:	4630      	mov	r0, r6
 8002dca:	f000 f895 	bl	8002ef8 <_malloc_r>
 8002dce:	b948      	cbnz	r0, 8002de4 <__smakebuf_r+0x44>
 8002dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dd4:	059a      	lsls	r2, r3, #22
 8002dd6:	d4ef      	bmi.n	8002db8 <__smakebuf_r+0x18>
 8002dd8:	f023 0303 	bic.w	r3, r3, #3
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	81a3      	strh	r3, [r4, #12]
 8002de2:	e7e3      	b.n	8002dac <__smakebuf_r+0xc>
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <__smakebuf_r+0x7c>)
 8002de6:	62b3      	str	r3, [r6, #40]	; 0x28
 8002de8:	89a3      	ldrh	r3, [r4, #12]
 8002dea:	6020      	str	r0, [r4, #0]
 8002dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df0:	81a3      	strh	r3, [r4, #12]
 8002df2:	9b00      	ldr	r3, [sp, #0]
 8002df4:	6163      	str	r3, [r4, #20]
 8002df6:	9b01      	ldr	r3, [sp, #4]
 8002df8:	6120      	str	r0, [r4, #16]
 8002dfa:	b15b      	cbz	r3, 8002e14 <__smakebuf_r+0x74>
 8002dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e00:	4630      	mov	r0, r6
 8002e02:	f000 fc63 	bl	80036cc <_isatty_r>
 8002e06:	b128      	cbz	r0, 8002e14 <__smakebuf_r+0x74>
 8002e08:	89a3      	ldrh	r3, [r4, #12]
 8002e0a:	f023 0303 	bic.w	r3, r3, #3
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	81a3      	strh	r3, [r4, #12]
 8002e14:	89a0      	ldrh	r0, [r4, #12]
 8002e16:	4305      	orrs	r5, r0
 8002e18:	81a5      	strh	r5, [r4, #12]
 8002e1a:	e7cd      	b.n	8002db8 <__smakebuf_r+0x18>
 8002e1c:	08002bad 	.word	0x08002bad

08002e20 <_free_r>:
 8002e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e22:	2900      	cmp	r1, #0
 8002e24:	d044      	beq.n	8002eb0 <_free_r+0x90>
 8002e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e2a:	9001      	str	r0, [sp, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8002e32:	bfb8      	it	lt
 8002e34:	18e4      	addlt	r4, r4, r3
 8002e36:	f000 fc6b 	bl	8003710 <__malloc_lock>
 8002e3a:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <_free_r+0x94>)
 8002e3c:	9801      	ldr	r0, [sp, #4]
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	b933      	cbnz	r3, 8002e50 <_free_r+0x30>
 8002e42:	6063      	str	r3, [r4, #4]
 8002e44:	6014      	str	r4, [r2, #0]
 8002e46:	b003      	add	sp, #12
 8002e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e4c:	f000 bc66 	b.w	800371c <__malloc_unlock>
 8002e50:	42a3      	cmp	r3, r4
 8002e52:	d908      	bls.n	8002e66 <_free_r+0x46>
 8002e54:	6825      	ldr	r5, [r4, #0]
 8002e56:	1961      	adds	r1, r4, r5
 8002e58:	428b      	cmp	r3, r1
 8002e5a:	bf01      	itttt	eq
 8002e5c:	6819      	ldreq	r1, [r3, #0]
 8002e5e:	685b      	ldreq	r3, [r3, #4]
 8002e60:	1949      	addeq	r1, r1, r5
 8002e62:	6021      	streq	r1, [r4, #0]
 8002e64:	e7ed      	b.n	8002e42 <_free_r+0x22>
 8002e66:	461a      	mov	r2, r3
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	b10b      	cbz	r3, 8002e70 <_free_r+0x50>
 8002e6c:	42a3      	cmp	r3, r4
 8002e6e:	d9fa      	bls.n	8002e66 <_free_r+0x46>
 8002e70:	6811      	ldr	r1, [r2, #0]
 8002e72:	1855      	adds	r5, r2, r1
 8002e74:	42a5      	cmp	r5, r4
 8002e76:	d10b      	bne.n	8002e90 <_free_r+0x70>
 8002e78:	6824      	ldr	r4, [r4, #0]
 8002e7a:	4421      	add	r1, r4
 8002e7c:	1854      	adds	r4, r2, r1
 8002e7e:	42a3      	cmp	r3, r4
 8002e80:	6011      	str	r1, [r2, #0]
 8002e82:	d1e0      	bne.n	8002e46 <_free_r+0x26>
 8002e84:	681c      	ldr	r4, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	6053      	str	r3, [r2, #4]
 8002e8a:	4421      	add	r1, r4
 8002e8c:	6011      	str	r1, [r2, #0]
 8002e8e:	e7da      	b.n	8002e46 <_free_r+0x26>
 8002e90:	d902      	bls.n	8002e98 <_free_r+0x78>
 8002e92:	230c      	movs	r3, #12
 8002e94:	6003      	str	r3, [r0, #0]
 8002e96:	e7d6      	b.n	8002e46 <_free_r+0x26>
 8002e98:	6825      	ldr	r5, [r4, #0]
 8002e9a:	1961      	adds	r1, r4, r5
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	bf04      	itt	eq
 8002ea0:	6819      	ldreq	r1, [r3, #0]
 8002ea2:	685b      	ldreq	r3, [r3, #4]
 8002ea4:	6063      	str	r3, [r4, #4]
 8002ea6:	bf04      	itt	eq
 8002ea8:	1949      	addeq	r1, r1, r5
 8002eaa:	6021      	streq	r1, [r4, #0]
 8002eac:	6054      	str	r4, [r2, #4]
 8002eae:	e7ca      	b.n	8002e46 <_free_r+0x26>
 8002eb0:	b003      	add	sp, #12
 8002eb2:	bd30      	pop	{r4, r5, pc}
 8002eb4:	20000238 	.word	0x20000238

08002eb8 <sbrk_aligned>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	4e0e      	ldr	r6, [pc, #56]	; (8002ef4 <sbrk_aligned+0x3c>)
 8002ebc:	460c      	mov	r4, r1
 8002ebe:	6831      	ldr	r1, [r6, #0]
 8002ec0:	4605      	mov	r5, r0
 8002ec2:	b911      	cbnz	r1, 8002eca <sbrk_aligned+0x12>
 8002ec4:	f000 fb7a 	bl	80035bc <_sbrk_r>
 8002ec8:	6030      	str	r0, [r6, #0]
 8002eca:	4621      	mov	r1, r4
 8002ecc:	4628      	mov	r0, r5
 8002ece:	f000 fb75 	bl	80035bc <_sbrk_r>
 8002ed2:	1c43      	adds	r3, r0, #1
 8002ed4:	d00a      	beq.n	8002eec <sbrk_aligned+0x34>
 8002ed6:	1cc4      	adds	r4, r0, #3
 8002ed8:	f024 0403 	bic.w	r4, r4, #3
 8002edc:	42a0      	cmp	r0, r4
 8002ede:	d007      	beq.n	8002ef0 <sbrk_aligned+0x38>
 8002ee0:	1a21      	subs	r1, r4, r0
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	f000 fb6a 	bl	80035bc <_sbrk_r>
 8002ee8:	3001      	adds	r0, #1
 8002eea:	d101      	bne.n	8002ef0 <sbrk_aligned+0x38>
 8002eec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	2000023c 	.word	0x2000023c

08002ef8 <_malloc_r>:
 8002ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002efc:	1ccd      	adds	r5, r1, #3
 8002efe:	f025 0503 	bic.w	r5, r5, #3
 8002f02:	3508      	adds	r5, #8
 8002f04:	2d0c      	cmp	r5, #12
 8002f06:	bf38      	it	cc
 8002f08:	250c      	movcc	r5, #12
 8002f0a:	2d00      	cmp	r5, #0
 8002f0c:	4607      	mov	r7, r0
 8002f0e:	db01      	blt.n	8002f14 <_malloc_r+0x1c>
 8002f10:	42a9      	cmp	r1, r5
 8002f12:	d905      	bls.n	8002f20 <_malloc_r+0x28>
 8002f14:	230c      	movs	r3, #12
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	2600      	movs	r6, #0
 8002f1a:	4630      	mov	r0, r6
 8002f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f20:	4e2e      	ldr	r6, [pc, #184]	; (8002fdc <_malloc_r+0xe4>)
 8002f22:	f000 fbf5 	bl	8003710 <__malloc_lock>
 8002f26:	6833      	ldr	r3, [r6, #0]
 8002f28:	461c      	mov	r4, r3
 8002f2a:	bb34      	cbnz	r4, 8002f7a <_malloc_r+0x82>
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	4638      	mov	r0, r7
 8002f30:	f7ff ffc2 	bl	8002eb8 <sbrk_aligned>
 8002f34:	1c43      	adds	r3, r0, #1
 8002f36:	4604      	mov	r4, r0
 8002f38:	d14d      	bne.n	8002fd6 <_malloc_r+0xde>
 8002f3a:	6834      	ldr	r4, [r6, #0]
 8002f3c:	4626      	mov	r6, r4
 8002f3e:	2e00      	cmp	r6, #0
 8002f40:	d140      	bne.n	8002fc4 <_malloc_r+0xcc>
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	4631      	mov	r1, r6
 8002f46:	4638      	mov	r0, r7
 8002f48:	eb04 0803 	add.w	r8, r4, r3
 8002f4c:	f000 fb36 	bl	80035bc <_sbrk_r>
 8002f50:	4580      	cmp	r8, r0
 8002f52:	d13a      	bne.n	8002fca <_malloc_r+0xd2>
 8002f54:	6821      	ldr	r1, [r4, #0]
 8002f56:	3503      	adds	r5, #3
 8002f58:	1a6d      	subs	r5, r5, r1
 8002f5a:	f025 0503 	bic.w	r5, r5, #3
 8002f5e:	3508      	adds	r5, #8
 8002f60:	2d0c      	cmp	r5, #12
 8002f62:	bf38      	it	cc
 8002f64:	250c      	movcc	r5, #12
 8002f66:	4629      	mov	r1, r5
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f7ff ffa5 	bl	8002eb8 <sbrk_aligned>
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d02b      	beq.n	8002fca <_malloc_r+0xd2>
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	442b      	add	r3, r5
 8002f76:	6023      	str	r3, [r4, #0]
 8002f78:	e00e      	b.n	8002f98 <_malloc_r+0xa0>
 8002f7a:	6822      	ldr	r2, [r4, #0]
 8002f7c:	1b52      	subs	r2, r2, r5
 8002f7e:	d41e      	bmi.n	8002fbe <_malloc_r+0xc6>
 8002f80:	2a0b      	cmp	r2, #11
 8002f82:	d916      	bls.n	8002fb2 <_malloc_r+0xba>
 8002f84:	1961      	adds	r1, r4, r5
 8002f86:	42a3      	cmp	r3, r4
 8002f88:	6025      	str	r5, [r4, #0]
 8002f8a:	bf18      	it	ne
 8002f8c:	6059      	strne	r1, [r3, #4]
 8002f8e:	6863      	ldr	r3, [r4, #4]
 8002f90:	bf08      	it	eq
 8002f92:	6031      	streq	r1, [r6, #0]
 8002f94:	5162      	str	r2, [r4, r5]
 8002f96:	604b      	str	r3, [r1, #4]
 8002f98:	4638      	mov	r0, r7
 8002f9a:	f104 060b 	add.w	r6, r4, #11
 8002f9e:	f000 fbbd 	bl	800371c <__malloc_unlock>
 8002fa2:	f026 0607 	bic.w	r6, r6, #7
 8002fa6:	1d23      	adds	r3, r4, #4
 8002fa8:	1af2      	subs	r2, r6, r3
 8002faa:	d0b6      	beq.n	8002f1a <_malloc_r+0x22>
 8002fac:	1b9b      	subs	r3, r3, r6
 8002fae:	50a3      	str	r3, [r4, r2]
 8002fb0:	e7b3      	b.n	8002f1a <_malloc_r+0x22>
 8002fb2:	6862      	ldr	r2, [r4, #4]
 8002fb4:	42a3      	cmp	r3, r4
 8002fb6:	bf0c      	ite	eq
 8002fb8:	6032      	streq	r2, [r6, #0]
 8002fba:	605a      	strne	r2, [r3, #4]
 8002fbc:	e7ec      	b.n	8002f98 <_malloc_r+0xa0>
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	6864      	ldr	r4, [r4, #4]
 8002fc2:	e7b2      	b.n	8002f2a <_malloc_r+0x32>
 8002fc4:	4634      	mov	r4, r6
 8002fc6:	6876      	ldr	r6, [r6, #4]
 8002fc8:	e7b9      	b.n	8002f3e <_malloc_r+0x46>
 8002fca:	230c      	movs	r3, #12
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	4638      	mov	r0, r7
 8002fd0:	f000 fba4 	bl	800371c <__malloc_unlock>
 8002fd4:	e7a1      	b.n	8002f1a <_malloc_r+0x22>
 8002fd6:	6025      	str	r5, [r4, #0]
 8002fd8:	e7de      	b.n	8002f98 <_malloc_r+0xa0>
 8002fda:	bf00      	nop
 8002fdc:	20000238 	.word	0x20000238

08002fe0 <__sfputc_r>:
 8002fe0:	6893      	ldr	r3, [r2, #8]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	b410      	push	{r4}
 8002fe8:	6093      	str	r3, [r2, #8]
 8002fea:	da08      	bge.n	8002ffe <__sfputc_r+0x1e>
 8002fec:	6994      	ldr	r4, [r2, #24]
 8002fee:	42a3      	cmp	r3, r4
 8002ff0:	db01      	blt.n	8002ff6 <__sfputc_r+0x16>
 8002ff2:	290a      	cmp	r1, #10
 8002ff4:	d103      	bne.n	8002ffe <__sfputc_r+0x1e>
 8002ff6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ffa:	f7ff bc31 	b.w	8002860 <__swbuf_r>
 8002ffe:	6813      	ldr	r3, [r2, #0]
 8003000:	1c58      	adds	r0, r3, #1
 8003002:	6010      	str	r0, [r2, #0]
 8003004:	7019      	strb	r1, [r3, #0]
 8003006:	4608      	mov	r0, r1
 8003008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800300c:	4770      	bx	lr

0800300e <__sfputs_r>:
 800300e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003010:	4606      	mov	r6, r0
 8003012:	460f      	mov	r7, r1
 8003014:	4614      	mov	r4, r2
 8003016:	18d5      	adds	r5, r2, r3
 8003018:	42ac      	cmp	r4, r5
 800301a:	d101      	bne.n	8003020 <__sfputs_r+0x12>
 800301c:	2000      	movs	r0, #0
 800301e:	e007      	b.n	8003030 <__sfputs_r+0x22>
 8003020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003024:	463a      	mov	r2, r7
 8003026:	4630      	mov	r0, r6
 8003028:	f7ff ffda 	bl	8002fe0 <__sfputc_r>
 800302c:	1c43      	adds	r3, r0, #1
 800302e:	d1f3      	bne.n	8003018 <__sfputs_r+0xa>
 8003030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003034 <_vfiprintf_r>:
 8003034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003038:	460d      	mov	r5, r1
 800303a:	b09d      	sub	sp, #116	; 0x74
 800303c:	4614      	mov	r4, r2
 800303e:	4698      	mov	r8, r3
 8003040:	4606      	mov	r6, r0
 8003042:	b118      	cbz	r0, 800304c <_vfiprintf_r+0x18>
 8003044:	6983      	ldr	r3, [r0, #24]
 8003046:	b90b      	cbnz	r3, 800304c <_vfiprintf_r+0x18>
 8003048:	f7ff fde4 	bl	8002c14 <__sinit>
 800304c:	4b89      	ldr	r3, [pc, #548]	; (8003274 <_vfiprintf_r+0x240>)
 800304e:	429d      	cmp	r5, r3
 8003050:	d11b      	bne.n	800308a <_vfiprintf_r+0x56>
 8003052:	6875      	ldr	r5, [r6, #4]
 8003054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003056:	07d9      	lsls	r1, r3, #31
 8003058:	d405      	bmi.n	8003066 <_vfiprintf_r+0x32>
 800305a:	89ab      	ldrh	r3, [r5, #12]
 800305c:	059a      	lsls	r2, r3, #22
 800305e:	d402      	bmi.n	8003066 <_vfiprintf_r+0x32>
 8003060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003062:	f7ff fe75 	bl	8002d50 <__retarget_lock_acquire_recursive>
 8003066:	89ab      	ldrh	r3, [r5, #12]
 8003068:	071b      	lsls	r3, r3, #28
 800306a:	d501      	bpl.n	8003070 <_vfiprintf_r+0x3c>
 800306c:	692b      	ldr	r3, [r5, #16]
 800306e:	b9eb      	cbnz	r3, 80030ac <_vfiprintf_r+0x78>
 8003070:	4629      	mov	r1, r5
 8003072:	4630      	mov	r0, r6
 8003074:	f7ff fc46 	bl	8002904 <__swsetup_r>
 8003078:	b1c0      	cbz	r0, 80030ac <_vfiprintf_r+0x78>
 800307a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800307c:	07dc      	lsls	r4, r3, #31
 800307e:	d50e      	bpl.n	800309e <_vfiprintf_r+0x6a>
 8003080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003084:	b01d      	add	sp, #116	; 0x74
 8003086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800308a:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <_vfiprintf_r+0x244>)
 800308c:	429d      	cmp	r5, r3
 800308e:	d101      	bne.n	8003094 <_vfiprintf_r+0x60>
 8003090:	68b5      	ldr	r5, [r6, #8]
 8003092:	e7df      	b.n	8003054 <_vfiprintf_r+0x20>
 8003094:	4b79      	ldr	r3, [pc, #484]	; (800327c <_vfiprintf_r+0x248>)
 8003096:	429d      	cmp	r5, r3
 8003098:	bf08      	it	eq
 800309a:	68f5      	ldreq	r5, [r6, #12]
 800309c:	e7da      	b.n	8003054 <_vfiprintf_r+0x20>
 800309e:	89ab      	ldrh	r3, [r5, #12]
 80030a0:	0598      	lsls	r0, r3, #22
 80030a2:	d4ed      	bmi.n	8003080 <_vfiprintf_r+0x4c>
 80030a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030a6:	f7ff fe54 	bl	8002d52 <__retarget_lock_release_recursive>
 80030aa:	e7e9      	b.n	8003080 <_vfiprintf_r+0x4c>
 80030ac:	2300      	movs	r3, #0
 80030ae:	9309      	str	r3, [sp, #36]	; 0x24
 80030b0:	2320      	movs	r3, #32
 80030b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80030ba:	2330      	movs	r3, #48	; 0x30
 80030bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003280 <_vfiprintf_r+0x24c>
 80030c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030c4:	f04f 0901 	mov.w	r9, #1
 80030c8:	4623      	mov	r3, r4
 80030ca:	469a      	mov	sl, r3
 80030cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030d0:	b10a      	cbz	r2, 80030d6 <_vfiprintf_r+0xa2>
 80030d2:	2a25      	cmp	r2, #37	; 0x25
 80030d4:	d1f9      	bne.n	80030ca <_vfiprintf_r+0x96>
 80030d6:	ebba 0b04 	subs.w	fp, sl, r4
 80030da:	d00b      	beq.n	80030f4 <_vfiprintf_r+0xc0>
 80030dc:	465b      	mov	r3, fp
 80030de:	4622      	mov	r2, r4
 80030e0:	4629      	mov	r1, r5
 80030e2:	4630      	mov	r0, r6
 80030e4:	f7ff ff93 	bl	800300e <__sfputs_r>
 80030e8:	3001      	adds	r0, #1
 80030ea:	f000 80aa 	beq.w	8003242 <_vfiprintf_r+0x20e>
 80030ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030f0:	445a      	add	r2, fp
 80030f2:	9209      	str	r2, [sp, #36]	; 0x24
 80030f4:	f89a 3000 	ldrb.w	r3, [sl]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a2 	beq.w	8003242 <_vfiprintf_r+0x20e>
 80030fe:	2300      	movs	r3, #0
 8003100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003108:	f10a 0a01 	add.w	sl, sl, #1
 800310c:	9304      	str	r3, [sp, #16]
 800310e:	9307      	str	r3, [sp, #28]
 8003110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003114:	931a      	str	r3, [sp, #104]	; 0x68
 8003116:	4654      	mov	r4, sl
 8003118:	2205      	movs	r2, #5
 800311a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800311e:	4858      	ldr	r0, [pc, #352]	; (8003280 <_vfiprintf_r+0x24c>)
 8003120:	f7fd f886 	bl	8000230 <memchr>
 8003124:	9a04      	ldr	r2, [sp, #16]
 8003126:	b9d8      	cbnz	r0, 8003160 <_vfiprintf_r+0x12c>
 8003128:	06d1      	lsls	r1, r2, #27
 800312a:	bf44      	itt	mi
 800312c:	2320      	movmi	r3, #32
 800312e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003132:	0713      	lsls	r3, r2, #28
 8003134:	bf44      	itt	mi
 8003136:	232b      	movmi	r3, #43	; 0x2b
 8003138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800313c:	f89a 3000 	ldrb.w	r3, [sl]
 8003140:	2b2a      	cmp	r3, #42	; 0x2a
 8003142:	d015      	beq.n	8003170 <_vfiprintf_r+0x13c>
 8003144:	9a07      	ldr	r2, [sp, #28]
 8003146:	4654      	mov	r4, sl
 8003148:	2000      	movs	r0, #0
 800314a:	f04f 0c0a 	mov.w	ip, #10
 800314e:	4621      	mov	r1, r4
 8003150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003154:	3b30      	subs	r3, #48	; 0x30
 8003156:	2b09      	cmp	r3, #9
 8003158:	d94e      	bls.n	80031f8 <_vfiprintf_r+0x1c4>
 800315a:	b1b0      	cbz	r0, 800318a <_vfiprintf_r+0x156>
 800315c:	9207      	str	r2, [sp, #28]
 800315e:	e014      	b.n	800318a <_vfiprintf_r+0x156>
 8003160:	eba0 0308 	sub.w	r3, r0, r8
 8003164:	fa09 f303 	lsl.w	r3, r9, r3
 8003168:	4313      	orrs	r3, r2
 800316a:	9304      	str	r3, [sp, #16]
 800316c:	46a2      	mov	sl, r4
 800316e:	e7d2      	b.n	8003116 <_vfiprintf_r+0xe2>
 8003170:	9b03      	ldr	r3, [sp, #12]
 8003172:	1d19      	adds	r1, r3, #4
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	9103      	str	r1, [sp, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	bfbb      	ittet	lt
 800317c:	425b      	neglt	r3, r3
 800317e:	f042 0202 	orrlt.w	r2, r2, #2
 8003182:	9307      	strge	r3, [sp, #28]
 8003184:	9307      	strlt	r3, [sp, #28]
 8003186:	bfb8      	it	lt
 8003188:	9204      	strlt	r2, [sp, #16]
 800318a:	7823      	ldrb	r3, [r4, #0]
 800318c:	2b2e      	cmp	r3, #46	; 0x2e
 800318e:	d10c      	bne.n	80031aa <_vfiprintf_r+0x176>
 8003190:	7863      	ldrb	r3, [r4, #1]
 8003192:	2b2a      	cmp	r3, #42	; 0x2a
 8003194:	d135      	bne.n	8003202 <_vfiprintf_r+0x1ce>
 8003196:	9b03      	ldr	r3, [sp, #12]
 8003198:	1d1a      	adds	r2, r3, #4
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	9203      	str	r2, [sp, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	bfb8      	it	lt
 80031a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80031a6:	3402      	adds	r4, #2
 80031a8:	9305      	str	r3, [sp, #20]
 80031aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003290 <_vfiprintf_r+0x25c>
 80031ae:	7821      	ldrb	r1, [r4, #0]
 80031b0:	2203      	movs	r2, #3
 80031b2:	4650      	mov	r0, sl
 80031b4:	f7fd f83c 	bl	8000230 <memchr>
 80031b8:	b140      	cbz	r0, 80031cc <_vfiprintf_r+0x198>
 80031ba:	2340      	movs	r3, #64	; 0x40
 80031bc:	eba0 000a 	sub.w	r0, r0, sl
 80031c0:	fa03 f000 	lsl.w	r0, r3, r0
 80031c4:	9b04      	ldr	r3, [sp, #16]
 80031c6:	4303      	orrs	r3, r0
 80031c8:	3401      	adds	r4, #1
 80031ca:	9304      	str	r3, [sp, #16]
 80031cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031d0:	482c      	ldr	r0, [pc, #176]	; (8003284 <_vfiprintf_r+0x250>)
 80031d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031d6:	2206      	movs	r2, #6
 80031d8:	f7fd f82a 	bl	8000230 <memchr>
 80031dc:	2800      	cmp	r0, #0
 80031de:	d03f      	beq.n	8003260 <_vfiprintf_r+0x22c>
 80031e0:	4b29      	ldr	r3, [pc, #164]	; (8003288 <_vfiprintf_r+0x254>)
 80031e2:	bb1b      	cbnz	r3, 800322c <_vfiprintf_r+0x1f8>
 80031e4:	9b03      	ldr	r3, [sp, #12]
 80031e6:	3307      	adds	r3, #7
 80031e8:	f023 0307 	bic.w	r3, r3, #7
 80031ec:	3308      	adds	r3, #8
 80031ee:	9303      	str	r3, [sp, #12]
 80031f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031f2:	443b      	add	r3, r7
 80031f4:	9309      	str	r3, [sp, #36]	; 0x24
 80031f6:	e767      	b.n	80030c8 <_vfiprintf_r+0x94>
 80031f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80031fc:	460c      	mov	r4, r1
 80031fe:	2001      	movs	r0, #1
 8003200:	e7a5      	b.n	800314e <_vfiprintf_r+0x11a>
 8003202:	2300      	movs	r3, #0
 8003204:	3401      	adds	r4, #1
 8003206:	9305      	str	r3, [sp, #20]
 8003208:	4619      	mov	r1, r3
 800320a:	f04f 0c0a 	mov.w	ip, #10
 800320e:	4620      	mov	r0, r4
 8003210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003214:	3a30      	subs	r2, #48	; 0x30
 8003216:	2a09      	cmp	r2, #9
 8003218:	d903      	bls.n	8003222 <_vfiprintf_r+0x1ee>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0c5      	beq.n	80031aa <_vfiprintf_r+0x176>
 800321e:	9105      	str	r1, [sp, #20]
 8003220:	e7c3      	b.n	80031aa <_vfiprintf_r+0x176>
 8003222:	fb0c 2101 	mla	r1, ip, r1, r2
 8003226:	4604      	mov	r4, r0
 8003228:	2301      	movs	r3, #1
 800322a:	e7f0      	b.n	800320e <_vfiprintf_r+0x1da>
 800322c:	ab03      	add	r3, sp, #12
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	462a      	mov	r2, r5
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <_vfiprintf_r+0x258>)
 8003234:	a904      	add	r1, sp, #16
 8003236:	4630      	mov	r0, r6
 8003238:	f3af 8000 	nop.w
 800323c:	4607      	mov	r7, r0
 800323e:	1c78      	adds	r0, r7, #1
 8003240:	d1d6      	bne.n	80031f0 <_vfiprintf_r+0x1bc>
 8003242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003244:	07d9      	lsls	r1, r3, #31
 8003246:	d405      	bmi.n	8003254 <_vfiprintf_r+0x220>
 8003248:	89ab      	ldrh	r3, [r5, #12]
 800324a:	059a      	lsls	r2, r3, #22
 800324c:	d402      	bmi.n	8003254 <_vfiprintf_r+0x220>
 800324e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003250:	f7ff fd7f 	bl	8002d52 <__retarget_lock_release_recursive>
 8003254:	89ab      	ldrh	r3, [r5, #12]
 8003256:	065b      	lsls	r3, r3, #25
 8003258:	f53f af12 	bmi.w	8003080 <_vfiprintf_r+0x4c>
 800325c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800325e:	e711      	b.n	8003084 <_vfiprintf_r+0x50>
 8003260:	ab03      	add	r3, sp, #12
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	462a      	mov	r2, r5
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <_vfiprintf_r+0x258>)
 8003268:	a904      	add	r1, sp, #16
 800326a:	4630      	mov	r0, r6
 800326c:	f000 f880 	bl	8003370 <_printf_i>
 8003270:	e7e4      	b.n	800323c <_vfiprintf_r+0x208>
 8003272:	bf00      	nop
 8003274:	080037c0 	.word	0x080037c0
 8003278:	080037e0 	.word	0x080037e0
 800327c:	080037a0 	.word	0x080037a0
 8003280:	08003800 	.word	0x08003800
 8003284:	0800380a 	.word	0x0800380a
 8003288:	00000000 	.word	0x00000000
 800328c:	0800300f 	.word	0x0800300f
 8003290:	08003806 	.word	0x08003806

08003294 <_printf_common>:
 8003294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003298:	4616      	mov	r6, r2
 800329a:	4699      	mov	r9, r3
 800329c:	688a      	ldr	r2, [r1, #8]
 800329e:	690b      	ldr	r3, [r1, #16]
 80032a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032a4:	4293      	cmp	r3, r2
 80032a6:	bfb8      	it	lt
 80032a8:	4613      	movlt	r3, r2
 80032aa:	6033      	str	r3, [r6, #0]
 80032ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032b0:	4607      	mov	r7, r0
 80032b2:	460c      	mov	r4, r1
 80032b4:	b10a      	cbz	r2, 80032ba <_printf_common+0x26>
 80032b6:	3301      	adds	r3, #1
 80032b8:	6033      	str	r3, [r6, #0]
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	0699      	lsls	r1, r3, #26
 80032be:	bf42      	ittt	mi
 80032c0:	6833      	ldrmi	r3, [r6, #0]
 80032c2:	3302      	addmi	r3, #2
 80032c4:	6033      	strmi	r3, [r6, #0]
 80032c6:	6825      	ldr	r5, [r4, #0]
 80032c8:	f015 0506 	ands.w	r5, r5, #6
 80032cc:	d106      	bne.n	80032dc <_printf_common+0x48>
 80032ce:	f104 0a19 	add.w	sl, r4, #25
 80032d2:	68e3      	ldr	r3, [r4, #12]
 80032d4:	6832      	ldr	r2, [r6, #0]
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	42ab      	cmp	r3, r5
 80032da:	dc26      	bgt.n	800332a <_printf_common+0x96>
 80032dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032e0:	1e13      	subs	r3, r2, #0
 80032e2:	6822      	ldr	r2, [r4, #0]
 80032e4:	bf18      	it	ne
 80032e6:	2301      	movne	r3, #1
 80032e8:	0692      	lsls	r2, r2, #26
 80032ea:	d42b      	bmi.n	8003344 <_printf_common+0xb0>
 80032ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032f0:	4649      	mov	r1, r9
 80032f2:	4638      	mov	r0, r7
 80032f4:	47c0      	blx	r8
 80032f6:	3001      	adds	r0, #1
 80032f8:	d01e      	beq.n	8003338 <_printf_common+0xa4>
 80032fa:	6823      	ldr	r3, [r4, #0]
 80032fc:	68e5      	ldr	r5, [r4, #12]
 80032fe:	6832      	ldr	r2, [r6, #0]
 8003300:	f003 0306 	and.w	r3, r3, #6
 8003304:	2b04      	cmp	r3, #4
 8003306:	bf08      	it	eq
 8003308:	1aad      	subeq	r5, r5, r2
 800330a:	68a3      	ldr	r3, [r4, #8]
 800330c:	6922      	ldr	r2, [r4, #16]
 800330e:	bf0c      	ite	eq
 8003310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003314:	2500      	movne	r5, #0
 8003316:	4293      	cmp	r3, r2
 8003318:	bfc4      	itt	gt
 800331a:	1a9b      	subgt	r3, r3, r2
 800331c:	18ed      	addgt	r5, r5, r3
 800331e:	2600      	movs	r6, #0
 8003320:	341a      	adds	r4, #26
 8003322:	42b5      	cmp	r5, r6
 8003324:	d11a      	bne.n	800335c <_printf_common+0xc8>
 8003326:	2000      	movs	r0, #0
 8003328:	e008      	b.n	800333c <_printf_common+0xa8>
 800332a:	2301      	movs	r3, #1
 800332c:	4652      	mov	r2, sl
 800332e:	4649      	mov	r1, r9
 8003330:	4638      	mov	r0, r7
 8003332:	47c0      	blx	r8
 8003334:	3001      	adds	r0, #1
 8003336:	d103      	bne.n	8003340 <_printf_common+0xac>
 8003338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800333c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003340:	3501      	adds	r5, #1
 8003342:	e7c6      	b.n	80032d2 <_printf_common+0x3e>
 8003344:	18e1      	adds	r1, r4, r3
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	2030      	movs	r0, #48	; 0x30
 800334a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800334e:	4422      	add	r2, r4
 8003350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003358:	3302      	adds	r3, #2
 800335a:	e7c7      	b.n	80032ec <_printf_common+0x58>
 800335c:	2301      	movs	r3, #1
 800335e:	4622      	mov	r2, r4
 8003360:	4649      	mov	r1, r9
 8003362:	4638      	mov	r0, r7
 8003364:	47c0      	blx	r8
 8003366:	3001      	adds	r0, #1
 8003368:	d0e6      	beq.n	8003338 <_printf_common+0xa4>
 800336a:	3601      	adds	r6, #1
 800336c:	e7d9      	b.n	8003322 <_printf_common+0x8e>
	...

08003370 <_printf_i>:
 8003370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003374:	7e0f      	ldrb	r7, [r1, #24]
 8003376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003378:	2f78      	cmp	r7, #120	; 0x78
 800337a:	4691      	mov	r9, r2
 800337c:	4680      	mov	r8, r0
 800337e:	460c      	mov	r4, r1
 8003380:	469a      	mov	sl, r3
 8003382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003386:	d807      	bhi.n	8003398 <_printf_i+0x28>
 8003388:	2f62      	cmp	r7, #98	; 0x62
 800338a:	d80a      	bhi.n	80033a2 <_printf_i+0x32>
 800338c:	2f00      	cmp	r7, #0
 800338e:	f000 80d8 	beq.w	8003542 <_printf_i+0x1d2>
 8003392:	2f58      	cmp	r7, #88	; 0x58
 8003394:	f000 80a3 	beq.w	80034de <_printf_i+0x16e>
 8003398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800339c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033a0:	e03a      	b.n	8003418 <_printf_i+0xa8>
 80033a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033a6:	2b15      	cmp	r3, #21
 80033a8:	d8f6      	bhi.n	8003398 <_printf_i+0x28>
 80033aa:	a101      	add	r1, pc, #4	; (adr r1, 80033b0 <_printf_i+0x40>)
 80033ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033b0:	08003409 	.word	0x08003409
 80033b4:	0800341d 	.word	0x0800341d
 80033b8:	08003399 	.word	0x08003399
 80033bc:	08003399 	.word	0x08003399
 80033c0:	08003399 	.word	0x08003399
 80033c4:	08003399 	.word	0x08003399
 80033c8:	0800341d 	.word	0x0800341d
 80033cc:	08003399 	.word	0x08003399
 80033d0:	08003399 	.word	0x08003399
 80033d4:	08003399 	.word	0x08003399
 80033d8:	08003399 	.word	0x08003399
 80033dc:	08003529 	.word	0x08003529
 80033e0:	0800344d 	.word	0x0800344d
 80033e4:	0800350b 	.word	0x0800350b
 80033e8:	08003399 	.word	0x08003399
 80033ec:	08003399 	.word	0x08003399
 80033f0:	0800354b 	.word	0x0800354b
 80033f4:	08003399 	.word	0x08003399
 80033f8:	0800344d 	.word	0x0800344d
 80033fc:	08003399 	.word	0x08003399
 8003400:	08003399 	.word	0x08003399
 8003404:	08003513 	.word	0x08003513
 8003408:	682b      	ldr	r3, [r5, #0]
 800340a:	1d1a      	adds	r2, r3, #4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	602a      	str	r2, [r5, #0]
 8003410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003418:	2301      	movs	r3, #1
 800341a:	e0a3      	b.n	8003564 <_printf_i+0x1f4>
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	6829      	ldr	r1, [r5, #0]
 8003420:	0606      	lsls	r6, r0, #24
 8003422:	f101 0304 	add.w	r3, r1, #4
 8003426:	d50a      	bpl.n	800343e <_printf_i+0xce>
 8003428:	680e      	ldr	r6, [r1, #0]
 800342a:	602b      	str	r3, [r5, #0]
 800342c:	2e00      	cmp	r6, #0
 800342e:	da03      	bge.n	8003438 <_printf_i+0xc8>
 8003430:	232d      	movs	r3, #45	; 0x2d
 8003432:	4276      	negs	r6, r6
 8003434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003438:	485e      	ldr	r0, [pc, #376]	; (80035b4 <_printf_i+0x244>)
 800343a:	230a      	movs	r3, #10
 800343c:	e019      	b.n	8003472 <_printf_i+0x102>
 800343e:	680e      	ldr	r6, [r1, #0]
 8003440:	602b      	str	r3, [r5, #0]
 8003442:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003446:	bf18      	it	ne
 8003448:	b236      	sxthne	r6, r6
 800344a:	e7ef      	b.n	800342c <_printf_i+0xbc>
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	6820      	ldr	r0, [r4, #0]
 8003450:	1d19      	adds	r1, r3, #4
 8003452:	6029      	str	r1, [r5, #0]
 8003454:	0601      	lsls	r1, r0, #24
 8003456:	d501      	bpl.n	800345c <_printf_i+0xec>
 8003458:	681e      	ldr	r6, [r3, #0]
 800345a:	e002      	b.n	8003462 <_printf_i+0xf2>
 800345c:	0646      	lsls	r6, r0, #25
 800345e:	d5fb      	bpl.n	8003458 <_printf_i+0xe8>
 8003460:	881e      	ldrh	r6, [r3, #0]
 8003462:	4854      	ldr	r0, [pc, #336]	; (80035b4 <_printf_i+0x244>)
 8003464:	2f6f      	cmp	r7, #111	; 0x6f
 8003466:	bf0c      	ite	eq
 8003468:	2308      	moveq	r3, #8
 800346a:	230a      	movne	r3, #10
 800346c:	2100      	movs	r1, #0
 800346e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003472:	6865      	ldr	r5, [r4, #4]
 8003474:	60a5      	str	r5, [r4, #8]
 8003476:	2d00      	cmp	r5, #0
 8003478:	bfa2      	ittt	ge
 800347a:	6821      	ldrge	r1, [r4, #0]
 800347c:	f021 0104 	bicge.w	r1, r1, #4
 8003480:	6021      	strge	r1, [r4, #0]
 8003482:	b90e      	cbnz	r6, 8003488 <_printf_i+0x118>
 8003484:	2d00      	cmp	r5, #0
 8003486:	d04d      	beq.n	8003524 <_printf_i+0x1b4>
 8003488:	4615      	mov	r5, r2
 800348a:	fbb6 f1f3 	udiv	r1, r6, r3
 800348e:	fb03 6711 	mls	r7, r3, r1, r6
 8003492:	5dc7      	ldrb	r7, [r0, r7]
 8003494:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003498:	4637      	mov	r7, r6
 800349a:	42bb      	cmp	r3, r7
 800349c:	460e      	mov	r6, r1
 800349e:	d9f4      	bls.n	800348a <_printf_i+0x11a>
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d10b      	bne.n	80034bc <_printf_i+0x14c>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	07de      	lsls	r6, r3, #31
 80034a8:	d508      	bpl.n	80034bc <_printf_i+0x14c>
 80034aa:	6923      	ldr	r3, [r4, #16]
 80034ac:	6861      	ldr	r1, [r4, #4]
 80034ae:	4299      	cmp	r1, r3
 80034b0:	bfde      	ittt	le
 80034b2:	2330      	movle	r3, #48	; 0x30
 80034b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80034bc:	1b52      	subs	r2, r2, r5
 80034be:	6122      	str	r2, [r4, #16]
 80034c0:	f8cd a000 	str.w	sl, [sp]
 80034c4:	464b      	mov	r3, r9
 80034c6:	aa03      	add	r2, sp, #12
 80034c8:	4621      	mov	r1, r4
 80034ca:	4640      	mov	r0, r8
 80034cc:	f7ff fee2 	bl	8003294 <_printf_common>
 80034d0:	3001      	adds	r0, #1
 80034d2:	d14c      	bne.n	800356e <_printf_i+0x1fe>
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034d8:	b004      	add	sp, #16
 80034da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034de:	4835      	ldr	r0, [pc, #212]	; (80035b4 <_printf_i+0x244>)
 80034e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80034e4:	6829      	ldr	r1, [r5, #0]
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80034ec:	6029      	str	r1, [r5, #0]
 80034ee:	061d      	lsls	r5, r3, #24
 80034f0:	d514      	bpl.n	800351c <_printf_i+0x1ac>
 80034f2:	07df      	lsls	r7, r3, #31
 80034f4:	bf44      	itt	mi
 80034f6:	f043 0320 	orrmi.w	r3, r3, #32
 80034fa:	6023      	strmi	r3, [r4, #0]
 80034fc:	b91e      	cbnz	r6, 8003506 <_printf_i+0x196>
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	f023 0320 	bic.w	r3, r3, #32
 8003504:	6023      	str	r3, [r4, #0]
 8003506:	2310      	movs	r3, #16
 8003508:	e7b0      	b.n	800346c <_printf_i+0xfc>
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	f043 0320 	orr.w	r3, r3, #32
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	2378      	movs	r3, #120	; 0x78
 8003514:	4828      	ldr	r0, [pc, #160]	; (80035b8 <_printf_i+0x248>)
 8003516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800351a:	e7e3      	b.n	80034e4 <_printf_i+0x174>
 800351c:	0659      	lsls	r1, r3, #25
 800351e:	bf48      	it	mi
 8003520:	b2b6      	uxthmi	r6, r6
 8003522:	e7e6      	b.n	80034f2 <_printf_i+0x182>
 8003524:	4615      	mov	r5, r2
 8003526:	e7bb      	b.n	80034a0 <_printf_i+0x130>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	6826      	ldr	r6, [r4, #0]
 800352c:	6961      	ldr	r1, [r4, #20]
 800352e:	1d18      	adds	r0, r3, #4
 8003530:	6028      	str	r0, [r5, #0]
 8003532:	0635      	lsls	r5, r6, #24
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	d501      	bpl.n	800353c <_printf_i+0x1cc>
 8003538:	6019      	str	r1, [r3, #0]
 800353a:	e002      	b.n	8003542 <_printf_i+0x1d2>
 800353c:	0670      	lsls	r0, r6, #25
 800353e:	d5fb      	bpl.n	8003538 <_printf_i+0x1c8>
 8003540:	8019      	strh	r1, [r3, #0]
 8003542:	2300      	movs	r3, #0
 8003544:	6123      	str	r3, [r4, #16]
 8003546:	4615      	mov	r5, r2
 8003548:	e7ba      	b.n	80034c0 <_printf_i+0x150>
 800354a:	682b      	ldr	r3, [r5, #0]
 800354c:	1d1a      	adds	r2, r3, #4
 800354e:	602a      	str	r2, [r5, #0]
 8003550:	681d      	ldr	r5, [r3, #0]
 8003552:	6862      	ldr	r2, [r4, #4]
 8003554:	2100      	movs	r1, #0
 8003556:	4628      	mov	r0, r5
 8003558:	f7fc fe6a 	bl	8000230 <memchr>
 800355c:	b108      	cbz	r0, 8003562 <_printf_i+0x1f2>
 800355e:	1b40      	subs	r0, r0, r5
 8003560:	6060      	str	r0, [r4, #4]
 8003562:	6863      	ldr	r3, [r4, #4]
 8003564:	6123      	str	r3, [r4, #16]
 8003566:	2300      	movs	r3, #0
 8003568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800356c:	e7a8      	b.n	80034c0 <_printf_i+0x150>
 800356e:	6923      	ldr	r3, [r4, #16]
 8003570:	462a      	mov	r2, r5
 8003572:	4649      	mov	r1, r9
 8003574:	4640      	mov	r0, r8
 8003576:	47d0      	blx	sl
 8003578:	3001      	adds	r0, #1
 800357a:	d0ab      	beq.n	80034d4 <_printf_i+0x164>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	079b      	lsls	r3, r3, #30
 8003580:	d413      	bmi.n	80035aa <_printf_i+0x23a>
 8003582:	68e0      	ldr	r0, [r4, #12]
 8003584:	9b03      	ldr	r3, [sp, #12]
 8003586:	4298      	cmp	r0, r3
 8003588:	bfb8      	it	lt
 800358a:	4618      	movlt	r0, r3
 800358c:	e7a4      	b.n	80034d8 <_printf_i+0x168>
 800358e:	2301      	movs	r3, #1
 8003590:	4632      	mov	r2, r6
 8003592:	4649      	mov	r1, r9
 8003594:	4640      	mov	r0, r8
 8003596:	47d0      	blx	sl
 8003598:	3001      	adds	r0, #1
 800359a:	d09b      	beq.n	80034d4 <_printf_i+0x164>
 800359c:	3501      	adds	r5, #1
 800359e:	68e3      	ldr	r3, [r4, #12]
 80035a0:	9903      	ldr	r1, [sp, #12]
 80035a2:	1a5b      	subs	r3, r3, r1
 80035a4:	42ab      	cmp	r3, r5
 80035a6:	dcf2      	bgt.n	800358e <_printf_i+0x21e>
 80035a8:	e7eb      	b.n	8003582 <_printf_i+0x212>
 80035aa:	2500      	movs	r5, #0
 80035ac:	f104 0619 	add.w	r6, r4, #25
 80035b0:	e7f5      	b.n	800359e <_printf_i+0x22e>
 80035b2:	bf00      	nop
 80035b4:	08003811 	.word	0x08003811
 80035b8:	08003822 	.word	0x08003822

080035bc <_sbrk_r>:
 80035bc:	b538      	push	{r3, r4, r5, lr}
 80035be:	4d06      	ldr	r5, [pc, #24]	; (80035d8 <_sbrk_r+0x1c>)
 80035c0:	2300      	movs	r3, #0
 80035c2:	4604      	mov	r4, r0
 80035c4:	4608      	mov	r0, r1
 80035c6:	602b      	str	r3, [r5, #0]
 80035c8:	f7fd fc22 	bl	8000e10 <_sbrk>
 80035cc:	1c43      	adds	r3, r0, #1
 80035ce:	d102      	bne.n	80035d6 <_sbrk_r+0x1a>
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	b103      	cbz	r3, 80035d6 <_sbrk_r+0x1a>
 80035d4:	6023      	str	r3, [r4, #0]
 80035d6:	bd38      	pop	{r3, r4, r5, pc}
 80035d8:	20000240 	.word	0x20000240

080035dc <__sread>:
 80035dc:	b510      	push	{r4, lr}
 80035de:	460c      	mov	r4, r1
 80035e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035e4:	f000 f8a0 	bl	8003728 <_read_r>
 80035e8:	2800      	cmp	r0, #0
 80035ea:	bfab      	itete	ge
 80035ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035ee:	89a3      	ldrhlt	r3, [r4, #12]
 80035f0:	181b      	addge	r3, r3, r0
 80035f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035f6:	bfac      	ite	ge
 80035f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80035fa:	81a3      	strhlt	r3, [r4, #12]
 80035fc:	bd10      	pop	{r4, pc}

080035fe <__swrite>:
 80035fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003602:	461f      	mov	r7, r3
 8003604:	898b      	ldrh	r3, [r1, #12]
 8003606:	05db      	lsls	r3, r3, #23
 8003608:	4605      	mov	r5, r0
 800360a:	460c      	mov	r4, r1
 800360c:	4616      	mov	r6, r2
 800360e:	d505      	bpl.n	800361c <__swrite+0x1e>
 8003610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003614:	2302      	movs	r3, #2
 8003616:	2200      	movs	r2, #0
 8003618:	f000 f868 	bl	80036ec <_lseek_r>
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003626:	81a3      	strh	r3, [r4, #12]
 8003628:	4632      	mov	r2, r6
 800362a:	463b      	mov	r3, r7
 800362c:	4628      	mov	r0, r5
 800362e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003632:	f000 b817 	b.w	8003664 <_write_r>

08003636 <__sseek>:
 8003636:	b510      	push	{r4, lr}
 8003638:	460c      	mov	r4, r1
 800363a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800363e:	f000 f855 	bl	80036ec <_lseek_r>
 8003642:	1c43      	adds	r3, r0, #1
 8003644:	89a3      	ldrh	r3, [r4, #12]
 8003646:	bf15      	itete	ne
 8003648:	6560      	strne	r0, [r4, #84]	; 0x54
 800364a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800364e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003652:	81a3      	strheq	r3, [r4, #12]
 8003654:	bf18      	it	ne
 8003656:	81a3      	strhne	r3, [r4, #12]
 8003658:	bd10      	pop	{r4, pc}

0800365a <__sclose>:
 800365a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800365e:	f000 b813 	b.w	8003688 <_close_r>
	...

08003664 <_write_r>:
 8003664:	b538      	push	{r3, r4, r5, lr}
 8003666:	4d07      	ldr	r5, [pc, #28]	; (8003684 <_write_r+0x20>)
 8003668:	4604      	mov	r4, r0
 800366a:	4608      	mov	r0, r1
 800366c:	4611      	mov	r1, r2
 800366e:	2200      	movs	r2, #0
 8003670:	602a      	str	r2, [r5, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	f7fd fb7b 	bl	8000d6e <_write>
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	d102      	bne.n	8003682 <_write_r+0x1e>
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	b103      	cbz	r3, 8003682 <_write_r+0x1e>
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	bd38      	pop	{r3, r4, r5, pc}
 8003684:	20000240 	.word	0x20000240

08003688 <_close_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	4d06      	ldr	r5, [pc, #24]	; (80036a4 <_close_r+0x1c>)
 800368c:	2300      	movs	r3, #0
 800368e:	4604      	mov	r4, r0
 8003690:	4608      	mov	r0, r1
 8003692:	602b      	str	r3, [r5, #0]
 8003694:	f7fd fb87 	bl	8000da6 <_close>
 8003698:	1c43      	adds	r3, r0, #1
 800369a:	d102      	bne.n	80036a2 <_close_r+0x1a>
 800369c:	682b      	ldr	r3, [r5, #0]
 800369e:	b103      	cbz	r3, 80036a2 <_close_r+0x1a>
 80036a0:	6023      	str	r3, [r4, #0]
 80036a2:	bd38      	pop	{r3, r4, r5, pc}
 80036a4:	20000240 	.word	0x20000240

080036a8 <_fstat_r>:
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	4d07      	ldr	r5, [pc, #28]	; (80036c8 <_fstat_r+0x20>)
 80036ac:	2300      	movs	r3, #0
 80036ae:	4604      	mov	r4, r0
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	602b      	str	r3, [r5, #0]
 80036b6:	f7fd fb82 	bl	8000dbe <_fstat>
 80036ba:	1c43      	adds	r3, r0, #1
 80036bc:	d102      	bne.n	80036c4 <_fstat_r+0x1c>
 80036be:	682b      	ldr	r3, [r5, #0]
 80036c0:	b103      	cbz	r3, 80036c4 <_fstat_r+0x1c>
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	bd38      	pop	{r3, r4, r5, pc}
 80036c6:	bf00      	nop
 80036c8:	20000240 	.word	0x20000240

080036cc <_isatty_r>:
 80036cc:	b538      	push	{r3, r4, r5, lr}
 80036ce:	4d06      	ldr	r5, [pc, #24]	; (80036e8 <_isatty_r+0x1c>)
 80036d0:	2300      	movs	r3, #0
 80036d2:	4604      	mov	r4, r0
 80036d4:	4608      	mov	r0, r1
 80036d6:	602b      	str	r3, [r5, #0]
 80036d8:	f7fd fb81 	bl	8000dde <_isatty>
 80036dc:	1c43      	adds	r3, r0, #1
 80036de:	d102      	bne.n	80036e6 <_isatty_r+0x1a>
 80036e0:	682b      	ldr	r3, [r5, #0]
 80036e2:	b103      	cbz	r3, 80036e6 <_isatty_r+0x1a>
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	bd38      	pop	{r3, r4, r5, pc}
 80036e8:	20000240 	.word	0x20000240

080036ec <_lseek_r>:
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4d07      	ldr	r5, [pc, #28]	; (800370c <_lseek_r+0x20>)
 80036f0:	4604      	mov	r4, r0
 80036f2:	4608      	mov	r0, r1
 80036f4:	4611      	mov	r1, r2
 80036f6:	2200      	movs	r2, #0
 80036f8:	602a      	str	r2, [r5, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f7fd fb7a 	bl	8000df4 <_lseek>
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	d102      	bne.n	800370a <_lseek_r+0x1e>
 8003704:	682b      	ldr	r3, [r5, #0]
 8003706:	b103      	cbz	r3, 800370a <_lseek_r+0x1e>
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	bd38      	pop	{r3, r4, r5, pc}
 800370c:	20000240 	.word	0x20000240

08003710 <__malloc_lock>:
 8003710:	4801      	ldr	r0, [pc, #4]	; (8003718 <__malloc_lock+0x8>)
 8003712:	f7ff bb1d 	b.w	8002d50 <__retarget_lock_acquire_recursive>
 8003716:	bf00      	nop
 8003718:	20000234 	.word	0x20000234

0800371c <__malloc_unlock>:
 800371c:	4801      	ldr	r0, [pc, #4]	; (8003724 <__malloc_unlock+0x8>)
 800371e:	f7ff bb18 	b.w	8002d52 <__retarget_lock_release_recursive>
 8003722:	bf00      	nop
 8003724:	20000234 	.word	0x20000234

08003728 <_read_r>:
 8003728:	b538      	push	{r3, r4, r5, lr}
 800372a:	4d07      	ldr	r5, [pc, #28]	; (8003748 <_read_r+0x20>)
 800372c:	4604      	mov	r4, r0
 800372e:	4608      	mov	r0, r1
 8003730:	4611      	mov	r1, r2
 8003732:	2200      	movs	r2, #0
 8003734:	602a      	str	r2, [r5, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	f7fd fafc 	bl	8000d34 <_read>
 800373c:	1c43      	adds	r3, r0, #1
 800373e:	d102      	bne.n	8003746 <_read_r+0x1e>
 8003740:	682b      	ldr	r3, [r5, #0]
 8003742:	b103      	cbz	r3, 8003746 <_read_r+0x1e>
 8003744:	6023      	str	r3, [r4, #0]
 8003746:	bd38      	pop	{r3, r4, r5, pc}
 8003748:	20000240 	.word	0x20000240

0800374c <_init>:
 800374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800374e:	bf00      	nop
 8003750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003752:	bc08      	pop	{r3}
 8003754:	469e      	mov	lr, r3
 8003756:	4770      	bx	lr

08003758 <_fini>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr
